// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.4.1
//   Build date: 2013-08-07 19:00:49 UTC
//   on: 2013-08-13, 01:30:06 UTC
//   C++ generator version:
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/calendar_api/calendar_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/scoped_ptr.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/client/util/status.h"

#include "google/calendar_api/acl.h"
#include "google/calendar_api/acl_rule.h"
#include "google/calendar_api/calendar.h"
#include "google/calendar_api/calendar_list.h"
#include "google/calendar_api/calendar_list_entry.h"
#include "google/calendar_api/channel.h"
#include "google/calendar_api/colors.h"
#include "google/calendar_api/event.h"
#include "google/calendar_api/events.h"
#include "google/calendar_api/free_busy_request.h"
#include "google/calendar_api/free_busy_response.h"
#include "google/calendar_api/setting.h"
#include "google/calendar_api/settings.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_calendar_api {
using namespace googleapis;
const StringPiece CalendarService::googleapis_API_NAME("calendar");

const StringPiece CalendarService::googleapis_API_VERSION("v3");

const StringPiece CalendarService::googleapis_API_GENERATOR(
  "google-apis-code-generator 1.4.1 / 0.1");


const StringPiece CalendarService::SCOPES::CALENDAR("https://www.googleapis.com/auth/calendar");

const StringPiece CalendarService::SCOPES::CALENDAR_READONLY("https://www.googleapis.com/auth/calendar.readonly");
CalendarServiceBaseRequest::CalendarServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      prettyPrint_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauthToken_(false),
      _have_prettyPrint_(false),
      _have_quotaUser_(false),
      _have_userIp_(false) {
}

CalendarServiceBaseRequest::~CalendarServiceBaseRequest() {
}

util::Status CalendarServiceBaseRequest::AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target) {
  if (variable_name == "alt") {
    target->append(client::CppValueToEscapedUrlValue(
        alt_));
    return client::StatusOk();
  }
  if (variable_name == "fields") {
    target->append(client::CppValueToEscapedUrlValue(
        fields_));
    return client::StatusOk();
  }
  if (variable_name == "key") {
    target->append(client::CppValueToEscapedUrlValue(
        key_));
    return client::StatusOk();
  }
  if (variable_name == "oauthToken") {
    target->append(client::CppValueToEscapedUrlValue(
        oauthToken_));
    return client::StatusOk();
  }
  if (variable_name == "prettyPrint") {
    target->append(client::CppValueToEscapedUrlValue(
        prettyPrint_));
    return client::StatusOk();
  }
  if (variable_name == "quotaUser") {
    target->append(client::CppValueToEscapedUrlValue(
        quotaUser_));
    return client::StatusOk();
  }
  if (variable_name == "userIp") {
    target->append(client::CppValueToEscapedUrlValue(
        userIp_));
    return client::StatusOk();
  }
  return client::StatusInvalidArgument(
                         StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status CalendarServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauthToken_) {
    StrAppend(target, sep, "oauthToken=",
              client::CppValueToEscapedUrlValue(
                oauthToken_));
    sep = "&";
  }
  if (_have_prettyPrint_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                prettyPrint_));
    sep = "&";
  }
  if (_have_quotaUser_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quotaUser_));
    sep = "&";
  }
  if (_have_userIp_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                userIp_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


// Standard constructor.
AclResource_DeleteMethod::AclResource_DeleteMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "calendars/{calendarId}/acl/{ruleId}")),
      calendarId_(calendarId.as_string()),
      ruleId_(ruleId.as_string()) {
}

// Standard destructor.
AclResource_DeleteMethod::~AclResource_DeleteMethod() {
}


util::Status AclResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "ruleId") {
    target->append(client::CppValueToEscapedUrlValue(
        ruleId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AclResource_GetMethod::AclResource_GetMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "calendars/{calendarId}/acl/{ruleId}")),
      calendarId_(calendarId.as_string()),
      ruleId_(ruleId.as_string()) {
}

// Standard destructor.
AclResource_GetMethod::~AclResource_GetMethod() {
}


util::Status AclResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "ruleId") {
    target->append(client::CppValueToEscapedUrlValue(
        ruleId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AclResource_InsertMethod::AclResource_InsertMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::AclRule& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/acl")),
      calendarId_(calendarId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
AclResource_InsertMethod::~AclResource_InsertMethod() {
}


util::Status AclResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AclResource_ListMethod::AclResource_ListMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "calendars/{calendarId}/acl")),
      calendarId_(calendarId.as_string()) {
}

// Standard destructor.
AclResource_ListMethod::~AclResource_ListMethod() {
}


util::Status AclResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AclResource_PatchMethod::AclResource_PatchMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId, const google_calendar_api::AclRule& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "calendars/{calendarId}/acl/{ruleId}")),
      calendarId_(calendarId.as_string()),
      ruleId_(ruleId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
AclResource_PatchMethod::~AclResource_PatchMethod() {
}


util::Status AclResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "ruleId") {
    target->append(client::CppValueToEscapedUrlValue(
        ruleId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AclResource_UpdateMethod::AclResource_UpdateMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId, const google_calendar_api::AclRule& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "calendars/{calendarId}/acl/{ruleId}")),
      calendarId_(calendarId.as_string()),
      ruleId_(ruleId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
AclResource_UpdateMethod::~AclResource_UpdateMethod() {
}


util::Status AclResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "ruleId") {
    target->append(client::CppValueToEscapedUrlValue(
        ruleId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
CalendarListResource_DeleteMethod::CalendarListResource_DeleteMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "users/me/calendarList/{calendarId}")),
      calendarId_(calendarId.as_string()) {
}

// Standard destructor.
CalendarListResource_DeleteMethod::~CalendarListResource_DeleteMethod() {
}


util::Status CalendarListResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarListResource_GetMethod::CalendarListResource_GetMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "users/me/calendarList/{calendarId}")),
      calendarId_(calendarId.as_string()) {
}

// Standard destructor.
CalendarListResource_GetMethod::~CalendarListResource_GetMethod() {
}


util::Status CalendarListResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarListResource_InsertMethod::CalendarListResource_InsertMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const google_calendar_api::CalendarListEntry& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "users/me/calendarList")),
      colorRgbFormat_(0),
      _have_colorRgbFormat_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CalendarListResource_InsertMethod::~CalendarListResource_InsertMethod() {
}

util::Status CalendarListResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_colorRgbFormat_) {
    StrAppend(target, sep, "colorRgbFormat=",
              client::CppValueToEscapedUrlValue(
                colorRgbFormat_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CalendarListResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarListResource_ListMethod::CalendarListResource_ListMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "users/me/calendarList")),
      showHidden_(0),
      maxResults_(0),
      _have_pageToken_(false),
      _have_showHidden_(false),
      _have_maxResults_(false),
      _have_minAccessRole_(false) {
}

// Standard destructor.
CalendarListResource_ListMethod::~CalendarListResource_ListMethod() {
}

util::Status CalendarListResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_showHidden_) {
    StrAppend(target, sep, "showHidden=",
              client::CppValueToEscapedUrlValue(
                showHidden_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  if (_have_minAccessRole_) {
    StrAppend(target, sep, "minAccessRole=",
              client::CppValueToEscapedUrlValue(
                minAccessRole_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CalendarListResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarListResource_PatchMethod::CalendarListResource_PatchMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::CalendarListEntry& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "users/me/calendarList/{calendarId}")),
      calendarId_(calendarId.as_string()),
      colorRgbFormat_(0),
      _have_colorRgbFormat_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CalendarListResource_PatchMethod::~CalendarListResource_PatchMethod() {
}

util::Status CalendarListResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_colorRgbFormat_) {
    StrAppend(target, sep, "colorRgbFormat=",
              client::CppValueToEscapedUrlValue(
                colorRgbFormat_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CalendarListResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarListResource_UpdateMethod::CalendarListResource_UpdateMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::CalendarListEntry& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "users/me/calendarList/{calendarId}")),
      calendarId_(calendarId.as_string()),
      colorRgbFormat_(0),
      _have_colorRgbFormat_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CalendarListResource_UpdateMethod::~CalendarListResource_UpdateMethod() {
}

util::Status CalendarListResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_colorRgbFormat_) {
    StrAppend(target, sep, "colorRgbFormat=",
              client::CppValueToEscapedUrlValue(
                colorRgbFormat_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CalendarListResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
CalendarsResource_ClearMethod::CalendarsResource_ClearMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/clear")),
      calendarId_(calendarId.as_string()) {
}

// Standard destructor.
CalendarsResource_ClearMethod::~CalendarsResource_ClearMethod() {
}


util::Status CalendarsResource_ClearMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarsResource_DeleteMethod::CalendarsResource_DeleteMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "calendars/{calendarId}")),
      calendarId_(calendarId.as_string()) {
}

// Standard destructor.
CalendarsResource_DeleteMethod::~CalendarsResource_DeleteMethod() {
}


util::Status CalendarsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarsResource_GetMethod::CalendarsResource_GetMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "calendars/{calendarId}")),
      calendarId_(calendarId.as_string()) {
}

// Standard destructor.
CalendarsResource_GetMethod::~CalendarsResource_GetMethod() {
}


util::Status CalendarsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarsResource_InsertMethod::CalendarsResource_InsertMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const google_calendar_api::Calendar& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars")) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CalendarsResource_InsertMethod::~CalendarsResource_InsertMethod() {
}


// Standard constructor.
CalendarsResource_PatchMethod::CalendarsResource_PatchMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Calendar& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "calendars/{calendarId}")),
      calendarId_(calendarId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CalendarsResource_PatchMethod::~CalendarsResource_PatchMethod() {
}


util::Status CalendarsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CalendarsResource_UpdateMethod::CalendarsResource_UpdateMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Calendar& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "calendars/{calendarId}")),
      calendarId_(calendarId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CalendarsResource_UpdateMethod::~CalendarsResource_UpdateMethod() {
}


util::Status CalendarsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
ChannelsResource_StopMethod::ChannelsResource_StopMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const google_calendar_api::Channel& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "channels/stop")) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
ChannelsResource_StopMethod::~ChannelsResource_StopMethod() {
}

// Standard constructor.
ColorsResource_GetMethod::ColorsResource_GetMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "colors")) {
}

// Standard destructor.
ColorsResource_GetMethod::~ColorsResource_GetMethod() {
}

// Standard constructor.
EventsResource_DeleteMethod::EventsResource_DeleteMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/{eventId}")),
      calendarId_(calendarId.as_string()),
      eventId_(eventId.as_string()),
      sendNotifications_(0),
      _have_sendNotifications_(false) {
}

// Standard destructor.
EventsResource_DeleteMethod::~EventsResource_DeleteMethod() {
}

util::Status EventsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_sendNotifications_) {
    StrAppend(target, sep, "sendNotifications=",
              client::CppValueToEscapedUrlValue(
                sendNotifications_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "eventId") {
    target->append(client::CppValueToEscapedUrlValue(
        eventId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_GetMethod::EventsResource_GetMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/{eventId}")),
      calendarId_(calendarId.as_string()),
      eventId_(eventId.as_string()),
      alwaysIncludeEmail_(0),
      maxAttendees_(0),
      _have_timeZone_(false),
      _have_alwaysIncludeEmail_(false),
      _have_maxAttendees_(false) {
}

// Standard destructor.
EventsResource_GetMethod::~EventsResource_GetMethod() {
}

util::Status EventsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_timeZone_) {
    StrAppend(target, sep, "timeZone=",
              client::CppValueToEscapedUrlValue(
                timeZone_));
    sep = "&";
  }
  if (_have_alwaysIncludeEmail_) {
    StrAppend(target, sep, "alwaysIncludeEmail=",
              client::CppValueToEscapedUrlValue(
                alwaysIncludeEmail_));
    sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "eventId") {
    target->append(client::CppValueToEscapedUrlValue(
        eventId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_ImportMethod::EventsResource_ImportMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Event& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/import")),
      calendarId_(calendarId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
EventsResource_ImportMethod::~EventsResource_ImportMethod() {
}


util::Status EventsResource_ImportMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_InsertMethod::EventsResource_InsertMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Event& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events")),
      calendarId_(calendarId.as_string()),
      sendNotifications_(0),
      maxAttendees_(0),
      _have_sendNotifications_(false),
      _have_maxAttendees_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
EventsResource_InsertMethod::~EventsResource_InsertMethod() {
}

util::Status EventsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_sendNotifications_) {
    StrAppend(target, sep, "sendNotifications=",
              client::CppValueToEscapedUrlValue(
                sendNotifications_));
    sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_InstancesMethod::EventsResource_InstancesMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/{eventId}/instances")),
      calendarId_(calendarId.as_string()),
      eventId_(eventId.as_string()),
      showDeleted_(0),
      timeMax_(0),
      alwaysIncludeEmail_(0),
      maxResults_(0),
      timeMin_(0),
      maxAttendees_(0),
      _have_showDeleted_(false),
      _have_timeMax_(false),
      _have_alwaysIncludeEmail_(false),
      _have_maxResults_(false),
      _have_pageToken_(false),
      _have_timeMin_(false),
      _have_timeZone_(false),
      _have_originalStart_(false),
      _have_maxAttendees_(false) {
}

// Standard destructor.
EventsResource_InstancesMethod::~EventsResource_InstancesMethod() {
}

util::Status EventsResource_InstancesMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_showDeleted_) {
    StrAppend(target, sep, "showDeleted=",
              client::CppValueToEscapedUrlValue(
                showDeleted_));
    sep = "&";
  }
  if (_have_timeMax_) {
    StrAppend(target, sep, "timeMax=",
      client::EscapeForUrl(timeMax_.ToString()));
      sep = "&";
  }
  if (_have_alwaysIncludeEmail_) {
    StrAppend(target, sep, "alwaysIncludeEmail=",
              client::CppValueToEscapedUrlValue(
                alwaysIncludeEmail_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_timeMin_) {
    StrAppend(target, sep, "timeMin=",
      client::EscapeForUrl(timeMin_.ToString()));
      sep = "&";
  }
  if (_have_timeZone_) {
    StrAppend(target, sep, "timeZone=",
              client::CppValueToEscapedUrlValue(
                timeZone_));
    sep = "&";
  }
  if (_have_originalStart_) {
    StrAppend(target, sep, "originalStart=",
              client::CppValueToEscapedUrlValue(
                originalStart_));
    sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_InstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "eventId") {
    target->append(client::CppValueToEscapedUrlValue(
        eventId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_ListMethod::EventsResource_ListMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events")),
      calendarId_(calendarId.as_string()),
      showHiddenInvitations_(0),
      showDeleted_(0),
      updatedMin_(0),
      singleEvents_(0),
      alwaysIncludeEmail_(0),
      maxResults_(0),
      timeMin_(0),
      timeMax_(0),
      maxAttendees_(0),
      _have_orderBy_(false),
      _have_showHiddenInvitations_(false),
      _have_showDeleted_(false),
      _have_iCalUID_(false),
      _have_updatedMin_(false),
      _have_singleEvents_(false),
      _have_alwaysIncludeEmail_(false),
      _have_maxResults_(false),
      _have_q_(false),
      _have_pageToken_(false),
      _have_timeMin_(false),
      _have_timeZone_(false),
      _have_timeMax_(false),
      _have_maxAttendees_(false) {
}

// Standard destructor.
EventsResource_ListMethod::~EventsResource_ListMethod() {
}

util::Status EventsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_orderBy_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                orderBy_));
    sep = "&";
  }
  if (_have_showHiddenInvitations_) {
    StrAppend(target, sep, "showHiddenInvitations=",
              client::CppValueToEscapedUrlValue(
                showHiddenInvitations_));
    sep = "&";
  }
  if (_have_showDeleted_) {
    StrAppend(target, sep, "showDeleted=",
              client::CppValueToEscapedUrlValue(
                showDeleted_));
    sep = "&";
  }
  if (_have_iCalUID_) {
    StrAppend(target, sep, "iCalUID=",
              client::CppValueToEscapedUrlValue(
                iCalUID_));
    sep = "&";
  }
  if (_have_updatedMin_) {
    StrAppend(target, sep, "updatedMin=",
      client::EscapeForUrl(updatedMin_.ToString()));
      sep = "&";
  }
  if (_have_singleEvents_) {
    StrAppend(target, sep, "singleEvents=",
              client::CppValueToEscapedUrlValue(
                singleEvents_));
    sep = "&";
  }
  if (_have_alwaysIncludeEmail_) {
    StrAppend(target, sep, "alwaysIncludeEmail=",
              client::CppValueToEscapedUrlValue(
                alwaysIncludeEmail_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_timeMin_) {
    StrAppend(target, sep, "timeMin=",
      client::EscapeForUrl(timeMin_.ToString()));
      sep = "&";
  }
  if (_have_timeZone_) {
    StrAppend(target, sep, "timeZone=",
              client::CppValueToEscapedUrlValue(
                timeZone_));
    sep = "&";
  }
  if (_have_timeMax_) {
    StrAppend(target, sep, "timeMax=",
      client::EscapeForUrl(timeMax_.ToString()));
      sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_MoveMethod::EventsResource_MoveMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId, const StringPiece& destination)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/{eventId}/move")),
      calendarId_(calendarId.as_string()),
      eventId_(eventId.as_string()),
      destination_(destination.as_string()),
      sendNotifications_(0),
      _have_sendNotifications_(false) {
}

// Standard destructor.
EventsResource_MoveMethod::~EventsResource_MoveMethod() {
}

util::Status EventsResource_MoveMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "destination=",
              client::CppValueToEscapedUrlValue(
                destination_));
    sep = "&";
  if (_have_sendNotifications_) {
    StrAppend(target, sep, "sendNotifications=",
              client::CppValueToEscapedUrlValue(
                sendNotifications_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_MoveMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "eventId") {
    target->append(client::CppValueToEscapedUrlValue(
        eventId_));
    return client::StatusOk();
  }
  if (variable_name == "destination") {
    target->append(client::CppValueToEscapedUrlValue(
        destination_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_PatchMethod::EventsResource_PatchMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId, const google_calendar_api::Event& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/{eventId}")),
      calendarId_(calendarId.as_string()),
      eventId_(eventId.as_string()),
      sendNotifications_(0),
      alwaysIncludeEmail_(0),
      maxAttendees_(0),
      _have_sendNotifications_(false),
      _have_alwaysIncludeEmail_(false),
      _have_maxAttendees_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
EventsResource_PatchMethod::~EventsResource_PatchMethod() {
}

util::Status EventsResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_sendNotifications_) {
    StrAppend(target, sep, "sendNotifications=",
              client::CppValueToEscapedUrlValue(
                sendNotifications_));
    sep = "&";
  }
  if (_have_alwaysIncludeEmail_) {
    StrAppend(target, sep, "alwaysIncludeEmail=",
              client::CppValueToEscapedUrlValue(
                alwaysIncludeEmail_));
    sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "eventId") {
    target->append(client::CppValueToEscapedUrlValue(
        eventId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_QuickAddMethod::EventsResource_QuickAddMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& text)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/quickAdd")),
      calendarId_(calendarId.as_string()),
      text_(text.as_string()),
      sendNotifications_(0),
      _have_sendNotifications_(false) {
}

// Standard destructor.
EventsResource_QuickAddMethod::~EventsResource_QuickAddMethod() {
}

util::Status EventsResource_QuickAddMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "text=",
              client::CppValueToEscapedUrlValue(
                text_));
    sep = "&";
  if (_have_sendNotifications_) {
    StrAppend(target, sep, "sendNotifications=",
              client::CppValueToEscapedUrlValue(
                sendNotifications_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_QuickAddMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "text") {
    target->append(client::CppValueToEscapedUrlValue(
        text_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_UpdateMethod::EventsResource_UpdateMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId, const google_calendar_api::Event& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/{eventId}")),
      calendarId_(calendarId.as_string()),
      eventId_(eventId.as_string()),
      sendNotifications_(0),
      alwaysIncludeEmail_(0),
      maxAttendees_(0),
      _have_sendNotifications_(false),
      _have_alwaysIncludeEmail_(false),
      _have_maxAttendees_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
EventsResource_UpdateMethod::~EventsResource_UpdateMethod() {
}

util::Status EventsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_sendNotifications_) {
    StrAppend(target, sep, "sendNotifications=",
              client::CppValueToEscapedUrlValue(
                sendNotifications_));
    sep = "&";
  }
  if (_have_alwaysIncludeEmail_) {
    StrAppend(target, sep, "alwaysIncludeEmail=",
              client::CppValueToEscapedUrlValue(
                alwaysIncludeEmail_));
    sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  if (variable_name == "eventId") {
    target->append(client::CppValueToEscapedUrlValue(
        eventId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EventsResource_WatchMethod::EventsResource_WatchMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Channel& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "calendars/{calendarId}/events/watch")),
      calendarId_(calendarId.as_string()),
      showHiddenInvitations_(0),
      showDeleted_(0),
      updatedMin_(0),
      singleEvents_(0),
      alwaysIncludeEmail_(0),
      maxResults_(0),
      timeMin_(0),
      timeMax_(0),
      maxAttendees_(0),
      _have_orderBy_(false),
      _have_showHiddenInvitations_(false),
      _have_showDeleted_(false),
      _have_iCalUID_(false),
      _have_updatedMin_(false),
      _have_singleEvents_(false),
      _have_alwaysIncludeEmail_(false),
      _have_maxResults_(false),
      _have_q_(false),
      _have_pageToken_(false),
      _have_timeMin_(false),
      _have_timeZone_(false),
      _have_timeMax_(false),
      _have_maxAttendees_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
EventsResource_WatchMethod::~EventsResource_WatchMethod() {
}

util::Status EventsResource_WatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_orderBy_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                orderBy_));
    sep = "&";
  }
  if (_have_showHiddenInvitations_) {
    StrAppend(target, sep, "showHiddenInvitations=",
              client::CppValueToEscapedUrlValue(
                showHiddenInvitations_));
    sep = "&";
  }
  if (_have_showDeleted_) {
    StrAppend(target, sep, "showDeleted=",
              client::CppValueToEscapedUrlValue(
                showDeleted_));
    sep = "&";
  }
  if (_have_iCalUID_) {
    StrAppend(target, sep, "iCalUID=",
              client::CppValueToEscapedUrlValue(
                iCalUID_));
    sep = "&";
  }
  if (_have_updatedMin_) {
    StrAppend(target, sep, "updatedMin=",
      client::EscapeForUrl(updatedMin_.ToString()));
      sep = "&";
  }
  if (_have_singleEvents_) {
    StrAppend(target, sep, "singleEvents=",
              client::CppValueToEscapedUrlValue(
                singleEvents_));
    sep = "&";
  }
  if (_have_alwaysIncludeEmail_) {
    StrAppend(target, sep, "alwaysIncludeEmail=",
              client::CppValueToEscapedUrlValue(
                alwaysIncludeEmail_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_timeMin_) {
    StrAppend(target, sep, "timeMin=",
      client::EscapeForUrl(timeMin_.ToString()));
      sep = "&";
  }
  if (_have_timeZone_) {
    StrAppend(target, sep, "timeZone=",
              client::CppValueToEscapedUrlValue(
                timeZone_));
    sep = "&";
  }
  if (_have_timeMax_) {
    StrAppend(target, sep, "timeMax=",
      client::EscapeForUrl(timeMax_.ToString()));
      sep = "&";
  }
  if (_have_maxAttendees_) {
    StrAppend(target, sep, "maxAttendees=",
              client::CppValueToEscapedUrlValue(
                maxAttendees_));
    sep = "&";
  }
  return CalendarServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EventsResource_WatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "calendarId") {
    target->append(client::CppValueToEscapedUrlValue(
        calendarId_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
FreebusyResource_QueryMethod::FreebusyResource_QueryMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const google_calendar_api::FreeBusyRequest& _content_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "freeBusy")) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
FreebusyResource_QueryMethod::~FreebusyResource_QueryMethod() {
}

// Standard constructor.
SettingsResource_GetMethod::SettingsResource_GetMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& setting)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "users/me/settings/{setting}")),
      setting_(setting.as_string()) {
}

// Standard destructor.
SettingsResource_GetMethod::~SettingsResource_GetMethod() {
}


util::Status SettingsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "setting") {
    target->append(client::CppValueToEscapedUrlValue(
        setting_));
    return client::StatusOk();
  }
  return CalendarServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SettingsResource_ListMethod::SettingsResource_ListMethod(
    const CalendarService* _service_, client::AuthorizationCredential* _credential_)
    : CalendarServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "users/me/settings")) {
}

// Standard destructor.
SettingsResource_ListMethod::~SettingsResource_ListMethod() {
}



CalendarService::CalendarService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "calendar/v3/", transport), acl_(this), calendarList_(this), calendars_(this), channels_(this), colors_(this), events_(this), freebusy_(this), settings_(this) {
}

CalendarService::~CalendarService() {
}

CalendarService::AclResource::AclResource(CalendarService* service)
  : service_(service) {
}

CalendarService::AclResource::~AclResource() {
}



AclResource_DeleteMethod* CalendarService::AclResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId) const {
  return new AclResource_DeleteMethod(service_, _credential_, calendarId, ruleId);
}



AclResource_GetMethod* CalendarService::AclResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId) const {
  return new AclResource_GetMethod(service_, _credential_, calendarId, ruleId);
}



AclResource_InsertMethod* CalendarService::AclResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::AclRule& _content_) const {
  return new AclResource_InsertMethod(service_, _credential_, calendarId, _content_);
}



AclResource_ListMethod* CalendarService::AclResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new AclResource_ListMethod(service_, _credential_, calendarId);
}



AclResource_PatchMethod* CalendarService::AclResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId, const google_calendar_api::AclRule& _content_) const {
  return new AclResource_PatchMethod(service_, _credential_, calendarId, ruleId, _content_);
}



AclResource_UpdateMethod* CalendarService::AclResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& ruleId, const google_calendar_api::AclRule& _content_) const {
  return new AclResource_UpdateMethod(service_, _credential_, calendarId, ruleId, _content_);
}CalendarService::CalendarListResource::CalendarListResource(CalendarService* service)
  : service_(service) {
}

CalendarService::CalendarListResource::~CalendarListResource() {
}



CalendarListResource_DeleteMethod* CalendarService::CalendarListResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new CalendarListResource_DeleteMethod(service_, _credential_, calendarId);
}



CalendarListResource_GetMethod* CalendarService::CalendarListResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new CalendarListResource_GetMethod(service_, _credential_, calendarId);
}



CalendarListResource_InsertMethod* CalendarService::CalendarListResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const google_calendar_api::CalendarListEntry& _content_) const {
  return new CalendarListResource_InsertMethod(service_, _credential_, _content_);
}



CalendarListResource_ListMethod* CalendarService::CalendarListResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new CalendarListResource_ListMethod(service_, _credential_);
} 

CalendarListResource_ListMethodPager* CalendarService::CalendarListResource::NewListMethodPager(client::AuthorizationCredential* _credential_) const {
  return new client::EncapsulatedServiceRequestPager<CalendarListResource_ListMethod, CalendarList>(new CalendarListResource_ListMethod(service_, _credential_));
}



CalendarListResource_PatchMethod* CalendarService::CalendarListResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::CalendarListEntry& _content_) const {
  return new CalendarListResource_PatchMethod(service_, _credential_, calendarId, _content_);
}



CalendarListResource_UpdateMethod* CalendarService::CalendarListResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::CalendarListEntry& _content_) const {
  return new CalendarListResource_UpdateMethod(service_, _credential_, calendarId, _content_);
}CalendarService::CalendarsResource::CalendarsResource(CalendarService* service)
  : service_(service) {
}

CalendarService::CalendarsResource::~CalendarsResource() {
}



CalendarsResource_ClearMethod* CalendarService::CalendarsResource::NewClearMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new CalendarsResource_ClearMethod(service_, _credential_, calendarId);
}



CalendarsResource_DeleteMethod* CalendarService::CalendarsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new CalendarsResource_DeleteMethod(service_, _credential_, calendarId);
}



CalendarsResource_GetMethod* CalendarService::CalendarsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new CalendarsResource_GetMethod(service_, _credential_, calendarId);
}



CalendarsResource_InsertMethod* CalendarService::CalendarsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const google_calendar_api::Calendar& _content_) const {
  return new CalendarsResource_InsertMethod(service_, _credential_, _content_);
}



CalendarsResource_PatchMethod* CalendarService::CalendarsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Calendar& _content_) const {
  return new CalendarsResource_PatchMethod(service_, _credential_, calendarId, _content_);
}



CalendarsResource_UpdateMethod* CalendarService::CalendarsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Calendar& _content_) const {
  return new CalendarsResource_UpdateMethod(service_, _credential_, calendarId, _content_);
}CalendarService::ChannelsResource::ChannelsResource(CalendarService* service)
  : service_(service) {
}

CalendarService::ChannelsResource::~ChannelsResource() {
}



ChannelsResource_StopMethod* CalendarService::ChannelsResource::NewStopMethod(client::AuthorizationCredential* _credential_, const google_calendar_api::Channel& _content_) const {
  return new ChannelsResource_StopMethod(service_, _credential_, _content_);
}CalendarService::ColorsResource::ColorsResource(CalendarService* service)
  : service_(service) {
}

CalendarService::ColorsResource::~ColorsResource() {
}



ColorsResource_GetMethod* CalendarService::ColorsResource::NewGetMethod(client::AuthorizationCredential* _credential_) const {
  return new ColorsResource_GetMethod(service_, _credential_);
}CalendarService::EventsResource::EventsResource(CalendarService* service)
  : service_(service) {
}

CalendarService::EventsResource::~EventsResource() {
}



EventsResource_DeleteMethod* CalendarService::EventsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId) const {
  return new EventsResource_DeleteMethod(service_, _credential_, calendarId, eventId);
}



EventsResource_GetMethod* CalendarService::EventsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId) const {
  return new EventsResource_GetMethod(service_, _credential_, calendarId, eventId);
}



EventsResource_ImportMethod* CalendarService::EventsResource::NewImportMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Event& _content_) const {
  return new EventsResource_ImportMethod(service_, _credential_, calendarId, _content_);
}



EventsResource_InsertMethod* CalendarService::EventsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Event& _content_) const {
  return new EventsResource_InsertMethod(service_, _credential_, calendarId, _content_);
}



EventsResource_InstancesMethod* CalendarService::EventsResource::NewInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId) const {
  return new EventsResource_InstancesMethod(service_, _credential_, calendarId, eventId);
} 

EventsResource_InstancesMethodPager* CalendarService::EventsResource::NewInstancesMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId) const {
  return new client::EncapsulatedServiceRequestPager<EventsResource_InstancesMethod, Events>(new EventsResource_InstancesMethod(service_, _credential_, calendarId, eventId));
}



EventsResource_ListMethod* CalendarService::EventsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new EventsResource_ListMethod(service_, _credential_, calendarId);
} 

EventsResource_ListMethodPager* CalendarService::EventsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& calendarId) const {
  return new client::EncapsulatedServiceRequestPager<EventsResource_ListMethod, Events>(new EventsResource_ListMethod(service_, _credential_, calendarId));
}



EventsResource_MoveMethod* CalendarService::EventsResource::NewMoveMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId, const StringPiece& destination) const {
  return new EventsResource_MoveMethod(service_, _credential_, calendarId, eventId, destination);
}



EventsResource_PatchMethod* CalendarService::EventsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId, const google_calendar_api::Event& _content_) const {
  return new EventsResource_PatchMethod(service_, _credential_, calendarId, eventId, _content_);
}



EventsResource_QuickAddMethod* CalendarService::EventsResource::NewQuickAddMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& text) const {
  return new EventsResource_QuickAddMethod(service_, _credential_, calendarId, text);
}



EventsResource_UpdateMethod* CalendarService::EventsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const StringPiece& eventId, const google_calendar_api::Event& _content_) const {
  return new EventsResource_UpdateMethod(service_, _credential_, calendarId, eventId, _content_);
}



EventsResource_WatchMethod* CalendarService::EventsResource::NewWatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& calendarId, const google_calendar_api::Channel& _content_) const {
  return new EventsResource_WatchMethod(service_, _credential_, calendarId, _content_);
}CalendarService::FreebusyResource::FreebusyResource(CalendarService* service)
  : service_(service) {
}

CalendarService::FreebusyResource::~FreebusyResource() {
}



FreebusyResource_QueryMethod* CalendarService::FreebusyResource::NewQueryMethod(client::AuthorizationCredential* _credential_, const google_calendar_api::FreeBusyRequest& _content_) const {
  return new FreebusyResource_QueryMethod(service_, _credential_, _content_);
}CalendarService::SettingsResource::SettingsResource(CalendarService* service)
  : service_(service) {
}

CalendarService::SettingsResource::~SettingsResource() {
}



SettingsResource_GetMethod* CalendarService::SettingsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& setting) const {
  return new SettingsResource_GetMethod(service_, _credential_, setting);
}



SettingsResource_ListMethod* CalendarService::SettingsResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new SettingsResource_ListMethod(service_, _credential_);
}
}  // namespace google_calendar_api
