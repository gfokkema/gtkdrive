// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.4.1
//   Build date: 2013-08-07 19:00:49 UTC
//   on: 2013-08-12, 19:01:32 UTC
//   C++ generator version:

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v2)
// Generated from:
//   Version: v2
//   Revision: 93
// Generated by:
//    Tool: google-apis-code-generator 1.4.1
//     C++: 0.1
#ifndef  GOOGLE_DRIVE_API_REVISION_H_
#define  GOOGLE_DRIVE_API_REVISION_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * A revision of a file.
 *
 * @ingroup DataObject
 */
class Revision : public client::JsonCppData {
 public:

  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Revision* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Revision(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Revision(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Revision();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::Revision</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::Revision");
  }

  /**
   * Determine if the '<code>downloadUrl</code>' attribute was set.
   *
   * @return true if the '<code>downloadUrl</code>' attribute was set.
   */
  bool has_downloadUrl() const {
    return Storage().isMember("downloadUrl");
  }

  /**
   * Clears the '<code>downloadUrl</code>' attribute.
   */
  void clear_downloadUrl() {
    MutableStorage()->removeMember("downloadUrl");
  }


  /**
   * Get the value of the '<code>downloadUrl</code>' attribute.
   */
  const StringPiece get_downloadUrl() const {
    const Json::Value& v = Storage("downloadUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>downloadUrl</code>' attribute.
   *
   * Short term download URL for the file. This will only be populated on files
   * with content stored in Drive.
   *
   * @param[in] value The new value.
   */
  void set_downloadUrl(const StringPiece& value) {
    *MutableStorage("downloadUrl") = value.data();
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * The ETag of the revision.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>exportLinks</code>' attribute was set.
   *
   * @return true if the '<code>exportLinks</code>' attribute was set.
   */
  bool has_exportLinks() const {
    return Storage().isMember("exportLinks");
  }

  /**
   * Clears the '<code>exportLinks</code>' attribute.
   */
  void clear_exportLinks() {
    MutableStorage()->removeMember("exportLinks");
  }


  /**
   * Get a reference to the value of the '<code>exportLinks</code>' attribute.
   */
  const client::JsonCppAssociativeArray<string > get_exportLinks() const {
    return client::JsonCppAssociativeArray<string >(Storage("exportLinks"));
  }

  /**
   * Gets a reference to a mutable value of the '<code>exportLinks</code>'
   * property.
   *
   * Links for exporting Google Docs to specific formats.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<string > mutable_exportLinks() {
    return client::JsonCppAssociativeArray<string >(MutableStorage("exportLinks"));
  }

  /**
   * Determine if the '<code>fileSize</code>' attribute was set.
   *
   * @return true if the '<code>fileSize</code>' attribute was set.
   */
  bool has_fileSize() const {
    return Storage().isMember("fileSize");
  }

  /**
   * Clears the '<code>fileSize</code>' attribute.
   */
  void clear_fileSize() {
    MutableStorage()->removeMember("fileSize");
  }


  /**
   * Get the value of the '<code>fileSize</code>' attribute.
   */
  int64 get_fileSize() const {
    const Json::Value& storage = Storage("fileSize");
    return client::JsonValueToCppValueHelper<int64>(storage);
  }

  /**
   * Change the '<code>fileSize</code>' attribute.
   *
   * The size of the revision in bytes. This will only be populated on files
   * with content stored in Drive.
   *
   * @param[in] value The new value.
   */
  void set_fileSize(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64>(
      value, MutableStorage("fileSize"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * The ID of the revision.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#revision.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>lastModifyingUser</code>' attribute was set.
   *
   * @return true if the '<code>lastModifyingUser</code>' attribute was set.
   */
  bool has_lastModifyingUser() const {
    return Storage().isMember("lastModifyingUser");
  }

  /**
   * Clears the '<code>lastModifyingUser</code>' attribute.
   */
  void clear_lastModifyingUser() {
    MutableStorage()->removeMember("lastModifyingUser");
  }


  /**
   * Get a reference to the value of the '<code>lastModifyingUser</code>'
   * attribute.
   */
  const User get_lastModifyingUser() const {
    return User(Storage("lastModifyingUser"));
  }

  /**
   * Gets a reference to a mutable value of the '<code>lastModifyingUser</code>'
   * property.
   *
   * The last user to modify this revision.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_lastModifyingUser() {
    return User(MutableStorage("lastModifyingUser"));
  }

  /**
   * Determine if the '<code>lastModifyingUserName</code>' attribute was set.
   *
   * @return true if the '<code>lastModifyingUserName</code>' attribute was set.
   */
  bool has_lastModifyingUserName() const {
    return Storage().isMember("lastModifyingUserName");
  }

  /**
   * Clears the '<code>lastModifyingUserName</code>' attribute.
   */
  void clear_lastModifyingUserName() {
    MutableStorage()->removeMember("lastModifyingUserName");
  }


  /**
   * Get the value of the '<code>lastModifyingUserName</code>' attribute.
   */
  const StringPiece get_lastModifyingUserName() const {
    const Json::Value& v = Storage("lastModifyingUserName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>lastModifyingUserName</code>' attribute.
   *
   * Name of the last user to modify this revision.
   *
   * @param[in] value The new value.
   */
  void set_lastModifyingUserName(const StringPiece& value) {
    *MutableStorage("lastModifyingUserName") = value.data();
  }

  /**
   * Determine if the '<code>md5Checksum</code>' attribute was set.
   *
   * @return true if the '<code>md5Checksum</code>' attribute was set.
   */
  bool has_md5Checksum() const {
    return Storage().isMember("md5Checksum");
  }

  /**
   * Clears the '<code>md5Checksum</code>' attribute.
   */
  void clear_md5Checksum() {
    MutableStorage()->removeMember("md5Checksum");
  }


  /**
   * Get the value of the '<code>md5Checksum</code>' attribute.
   */
  const StringPiece get_md5Checksum() const {
    const Json::Value& v = Storage("md5Checksum");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>md5Checksum</code>' attribute.
   *
   * An MD5 checksum for the content of this revision. This will only be
   * populated on files with content stored in Drive.
   *
   * @param[in] value The new value.
   */
  void set_md5Checksum(const StringPiece& value) {
    *MutableStorage("md5Checksum") = value.data();
  }

  /**
   * Determine if the '<code>mimeType</code>' attribute was set.
   *
   * @return true if the '<code>mimeType</code>' attribute was set.
   */
  bool has_mimeType() const {
    return Storage().isMember("mimeType");
  }

  /**
   * Clears the '<code>mimeType</code>' attribute.
   */
  void clear_mimeType() {
    MutableStorage()->removeMember("mimeType");
  }


  /**
   * Get the value of the '<code>mimeType</code>' attribute.
   */
  const StringPiece get_mimeType() const {
    const Json::Value& v = Storage("mimeType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mimeType</code>' attribute.
   *
   * The MIME type of the revision.
   *
   * @param[in] value The new value.
   */
  void set_mimeType(const StringPiece& value) {
    *MutableStorage("mimeType") = value.data();
  }

  /**
   * Determine if the '<code>modifiedDate</code>' attribute was set.
   *
   * @return true if the '<code>modifiedDate</code>' attribute was set.
   */
  bool has_modifiedDate() const {
    return Storage().isMember("modifiedDate");
  }

  /**
   * Clears the '<code>modifiedDate</code>' attribute.
   */
  void clear_modifiedDate() {
    MutableStorage()->removeMember("modifiedDate");
  }


  /**
   * Get the value of the '<code>modifiedDate</code>' attribute.
   */
  client::DateTime get_modifiedDate() const {
    const Json::Value& storage = Storage("modifiedDate");
    return client::JsonValueToCppValueHelper<client::DateTime>(storage);
  }

  /**
   * Change the '<code>modifiedDate</code>' attribute.
   *
   * Last time this revision was modified (formatted RFC 3339 timestamp).
   *
   * @param[in] value The new value.
   */
  void set_modifiedDate(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime>(
      value, MutableStorage("modifiedDate"));
  }

  /**
   * Determine if the '<code>originalFilename</code>' attribute was set.
   *
   * @return true if the '<code>originalFilename</code>' attribute was set.
   */
  bool has_originalFilename() const {
    return Storage().isMember("originalFilename");
  }

  /**
   * Clears the '<code>originalFilename</code>' attribute.
   */
  void clear_originalFilename() {
    MutableStorage()->removeMember("originalFilename");
  }


  /**
   * Get the value of the '<code>originalFilename</code>' attribute.
   */
  const StringPiece get_originalFilename() const {
    const Json::Value& v = Storage("originalFilename");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>originalFilename</code>' attribute.
   *
   * The original filename when this revision was created. This will only be
   * populated on files with content stored in Drive.
   *
   * @param[in] value The new value.
   */
  void set_originalFilename(const StringPiece& value) {
    *MutableStorage("originalFilename") = value.data();
  }

  /**
   * Determine if the '<code>pinned</code>' attribute was set.
   *
   * @return true if the '<code>pinned</code>' attribute was set.
   */
  bool has_pinned() const {
    return Storage().isMember("pinned");
  }

  /**
   * Clears the '<code>pinned</code>' attribute.
   */
  void clear_pinned() {
    MutableStorage()->removeMember("pinned");
  }


  /**
   * Get the value of the '<code>pinned</code>' attribute.
   */
  bool get_pinned() const {
    const Json::Value& storage = Storage("pinned");
    return client::JsonValueToCppValueHelper<bool>(storage);
  }

  /**
   * Change the '<code>pinned</code>' attribute.
   *
   * Whether this revision is pinned to prevent automatic purging. This will
   * only be populated and can only be modified on files with content stored in
   * Drive which are not Google Docs. Revisions can also be pinned when they are
   * created through the drive.files.insert/update/copy by using the pinned
   * query parameter.
   *
   * @param[in] value The new value.
   */
  void set_pinned(bool value) {
    client::SetJsonValueFromCppValueHelper<bool>(
      value, MutableStorage("pinned"));
  }

  /**
   * Determine if the '<code>publishAuto</code>' attribute was set.
   *
   * @return true if the '<code>publishAuto</code>' attribute was set.
   */
  bool has_publishAuto() const {
    return Storage().isMember("publishAuto");
  }

  /**
   * Clears the '<code>publishAuto</code>' attribute.
   */
  void clear_publishAuto() {
    MutableStorage()->removeMember("publishAuto");
  }


  /**
   * Get the value of the '<code>publishAuto</code>' attribute.
   */
  bool get_publishAuto() const {
    const Json::Value& storage = Storage("publishAuto");
    return client::JsonValueToCppValueHelper<bool>(storage);
  }

  /**
   * Change the '<code>publishAuto</code>' attribute.
   *
   * Whether subsequent revisions will be automatically republished. This is
   * only populated and can only be modified for Google Docs.
   *
   * @param[in] value The new value.
   */
  void set_publishAuto(bool value) {
    client::SetJsonValueFromCppValueHelper<bool>(
      value, MutableStorage("publishAuto"));
  }

  /**
   * Determine if the '<code>published</code>' attribute was set.
   *
   * @return true if the '<code>published</code>' attribute was set.
   */
  bool has_published() const {
    return Storage().isMember("published");
  }

  /**
   * Clears the '<code>published</code>' attribute.
   */
  void clear_published() {
    MutableStorage()->removeMember("published");
  }


  /**
   * Get the value of the '<code>published</code>' attribute.
   */
  bool get_published() const {
    const Json::Value& storage = Storage("published");
    return client::JsonValueToCppValueHelper<bool>(storage);
  }

  /**
   * Change the '<code>published</code>' attribute.
   *
   * Whether this revision is published. This is only populated and can only be
   * modified for Google Docs.
   *
   * @param[in] value The new value.
   */
  void set_published(bool value) {
    client::SetJsonValueFromCppValueHelper<bool>(
      value, MutableStorage("published"));
  }

  /**
   * Determine if the '<code>publishedLink</code>' attribute was set.
   *
   * @return true if the '<code>publishedLink</code>' attribute was set.
   */
  bool has_publishedLink() const {
    return Storage().isMember("publishedLink");
  }

  /**
   * Clears the '<code>publishedLink</code>' attribute.
   */
  void clear_publishedLink() {
    MutableStorage()->removeMember("publishedLink");
  }


  /**
   * Get the value of the '<code>publishedLink</code>' attribute.
   */
  const StringPiece get_publishedLink() const {
    const Json::Value& v = Storage("publishedLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>publishedLink</code>' attribute.
   *
   * A link to the published revision.
   *
   * @param[in] value The new value.
   */
  void set_publishedLink(const StringPiece& value) {
    *MutableStorage("publishedLink") = value.data();
  }

  /**
   * Determine if the '<code>publishedOutsideDomain</code>' attribute was set.
   *
   * @return true if the '<code>publishedOutsideDomain</code>' attribute was
   * set.
   */
  bool has_publishedOutsideDomain() const {
    return Storage().isMember("publishedOutsideDomain");
  }

  /**
   * Clears the '<code>publishedOutsideDomain</code>' attribute.
   */
  void clear_publishedOutsideDomain() {
    MutableStorage()->removeMember("publishedOutsideDomain");
  }


  /**
   * Get the value of the '<code>publishedOutsideDomain</code>' attribute.
   */
  bool get_publishedOutsideDomain() const {
    const Json::Value& storage = Storage("publishedOutsideDomain");
    return client::JsonValueToCppValueHelper<bool>(storage);
  }

  /**
   * Change the '<code>publishedOutsideDomain</code>' attribute.
   *
   * Whether this revision is published outside the domain. This is only
   * populated and can only be modified for Google Docs.
   *
   * @param[in] value The new value.
   */
  void set_publishedOutsideDomain(bool value) {
    client::SetJsonValueFromCppValueHelper<bool>(
      value, MutableStorage("publishedOutsideDomain"));
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_selfLink() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_selfLink() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_selfLink() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * A link back to this revision.
   *
   * @param[in] value The new value.
   */
  void set_selfLink(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

 private:
  void operator=(const Revision&);
};  // Revision
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_REVISION_H_
