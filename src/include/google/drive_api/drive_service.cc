// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.4.1
//   Build date: 2013-08-07 19:00:49 UTC
//   on: 2013-08-12, 19:01:32 UTC
//   C++ generator version:
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/drive_api/drive_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/scoped_ptr.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"

#include "google/drive_api/about.h"
#include "google/drive_api/app.h"
#include "google/drive_api/app_list.h"
#include "google/drive_api/change.h"
#include "google/drive_api/change_list.h"
#include "google/drive_api/channel.h"
#include "google/drive_api/child_list.h"
#include "google/drive_api/child_reference.h"
#include "google/drive_api/comment.h"
#include "google/drive_api/comment_list.h"
#include "google/drive_api/comment_reply.h"
#include "google/drive_api/comment_reply_list.h"
#include "google/drive_api/file.h"
#include "google/drive_api/file_list.h"
#include "google/drive_api/parent_list.h"
#include "google/drive_api/parent_reference.h"
#include "google/drive_api/permission.h"
#include "google/drive_api/permission_list.h"
#include "google/drive_api/property.h"
#include "google/drive_api/property_list.h"
#include "google/drive_api/revision.h"
#include "google/drive_api/revision_list.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_drive_api {
using namespace googleapis;
const StringPiece DriveService::googleapis_API_NAME("drive");

const StringPiece DriveService::googleapis_API_VERSION("v2");

const StringPiece DriveService::googleapis_API_GENERATOR(
  "google-apis-code-generator 1.4.1 / 0.1");


const StringPiece DriveService::SCOPES::DRIVE("https://www.googleapis.com/auth/drive");

const StringPiece DriveService::SCOPES::DRIVE_APPDATA("https://www.googleapis.com/auth/drive.appdata");

const StringPiece DriveService::SCOPES::DRIVE_APPS_READONLY("https://www.googleapis.com/auth/drive.apps.readonly");

const StringPiece DriveService::SCOPES::DRIVE_FILE("https://www.googleapis.com/auth/drive.file");

const StringPiece DriveService::SCOPES::DRIVE_METADATA_READONLY("https://www.googleapis.com/auth/drive.metadata.readonly");

const StringPiece DriveService::SCOPES::DRIVE_READONLY("https://www.googleapis.com/auth/drive.readonly");

const StringPiece DriveService::SCOPES::DRIVE_SCRIPTS("https://www.googleapis.com/auth/drive.scripts");
DriveServiceBaseRequest::DriveServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      prettyPrint_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauthToken_(false),
      _have_prettyPrint_(false),
      _have_quotaUser_(false),
      _have_userIp_(false) {
}

DriveServiceBaseRequest::~DriveServiceBaseRequest() {
}

util::Status DriveServiceBaseRequest::AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target) {
  if (variable_name == "alt") {
    target->append(client::CppValueToEscapedUrlValue(
        alt_));
    return client::StatusOk();
  }
  if (variable_name == "fields") {
    target->append(client::CppValueToEscapedUrlValue(
        fields_));
    return client::StatusOk();
  }
  if (variable_name == "key") {
    target->append(client::CppValueToEscapedUrlValue(
        key_));
    return client::StatusOk();
  }
  if (variable_name == "oauthToken") {
    target->append(client::CppValueToEscapedUrlValue(
        oauthToken_));
    return client::StatusOk();
  }
  if (variable_name == "prettyPrint") {
    target->append(client::CppValueToEscapedUrlValue(
        prettyPrint_));
    return client::StatusOk();
  }
  if (variable_name == "quotaUser") {
    target->append(client::CppValueToEscapedUrlValue(
        quotaUser_));
    return client::StatusOk();
  }
  if (variable_name == "userIp") {
    target->append(client::CppValueToEscapedUrlValue(
        userIp_));
    return client::StatusOk();
  }
  return client::StatusInvalidArgument(
                         StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status DriveServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauthToken_) {
    StrAppend(target, sep, "oauthToken=",
              client::CppValueToEscapedUrlValue(
                oauthToken_));
    sep = "&";
  }
  if (_have_prettyPrint_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                prettyPrint_));
    sep = "&";
  }
  if (_have_quotaUser_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quotaUser_));
    sep = "&";
  }
  if (_have_userIp_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                userIp_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


// Standard constructor.
AboutResource_GetMethod::AboutResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "about")),
      includeSubscribed_(true),
      maxChangeIdCount_(1),
      startChangeId_(0),
      _have_includeSubscribed_(false),
      _have_maxChangeIdCount_(false),
      _have_startChangeId_(false) {
}

// Standard destructor.
AboutResource_GetMethod::~AboutResource_GetMethod() {
}

util::Status AboutResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_includeSubscribed_) {
    StrAppend(target, sep, "includeSubscribed=",
              client::CppValueToEscapedUrlValue(
                includeSubscribed_));
    sep = "&";
  }
  if (_have_maxChangeIdCount_) {
    StrAppend(target, sep, "maxChangeIdCount=",
              client::CppValueToEscapedUrlValue(
                maxChangeIdCount_));
    sep = "&";
  }
  if (_have_startChangeId_) {
    StrAppend(target, sep, "startChangeId=",
              client::CppValueToEscapedUrlValue(
                startChangeId_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AboutResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
AppsResource_GetMethod::AppsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& appId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "apps/{appId}")),
      appId_(appId.as_string()) {
}

// Standard destructor.
AppsResource_GetMethod::~AppsResource_GetMethod() {
}


util::Status AppsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "appId") {
    target->append(client::CppValueToEscapedUrlValue(
        appId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AppsResource_ListMethod::AppsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "apps")) {
}

// Standard destructor.
AppsResource_ListMethod::~AppsResource_ListMethod() {
}

// Standard constructor.
ChangesResource_GetMethod::ChangesResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& changeId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "changes/{changeId}")),
      changeId_(changeId.as_string()) {
}

// Standard destructor.
ChangesResource_GetMethod::~ChangesResource_GetMethod() {
}


util::Status ChangesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "changeId") {
    target->append(client::CppValueToEscapedUrlValue(
        changeId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChangesResource_ListMethod::ChangesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "changes")),
      includeSubscribed_(true),
      startChangeId_(0),
      includeDeleted_(true),
      maxResults_(100),
      _have_includeSubscribed_(false),
      _have_startChangeId_(false),
      _have_includeDeleted_(false),
      _have_maxResults_(false),
      _have_pageToken_(false) {
}

// Standard destructor.
ChangesResource_ListMethod::~ChangesResource_ListMethod() {
}

util::Status ChangesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_includeSubscribed_) {
    StrAppend(target, sep, "includeSubscribed=",
              client::CppValueToEscapedUrlValue(
                includeSubscribed_));
    sep = "&";
  }
  if (_have_startChangeId_) {
    StrAppend(target, sep, "startChangeId=",
              client::CppValueToEscapedUrlValue(
                startChangeId_));
    sep = "&";
  }
  if (_have_includeDeleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                includeDeleted_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChangesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChangesResource_WatchMethod::ChangesResource_WatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const google_drive_api::Channel& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "changes/watch")),
      includeSubscribed_(true),
      startChangeId_(0),
      includeDeleted_(true),
      maxResults_(100),
      _have_includeSubscribed_(false),
      _have_startChangeId_(false),
      _have_includeDeleted_(false),
      _have_maxResults_(false),
      _have_pageToken_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
ChangesResource_WatchMethod::~ChangesResource_WatchMethod() {
}

util::Status ChangesResource_WatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_includeSubscribed_) {
    StrAppend(target, sep, "includeSubscribed=",
              client::CppValueToEscapedUrlValue(
                includeSubscribed_));
    sep = "&";
  }
  if (_have_startChangeId_) {
    StrAppend(target, sep, "startChangeId=",
              client::CppValueToEscapedUrlValue(
                startChangeId_));
    sep = "&";
  }
  if (_have_includeDeleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                includeDeleted_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChangesResource_WatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
ChannelsResource_StopMethod::ChannelsResource_StopMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const google_drive_api::Channel& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "channels/stop")) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
ChannelsResource_StopMethod::~ChannelsResource_StopMethod() {
}

// Standard constructor.
ChildrenResource_DeleteMethod::ChildrenResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& folderId, const StringPiece& childId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{folderId}/children/{childId}")),
      folderId_(folderId.as_string()),
      childId_(childId.as_string()) {
}

// Standard destructor.
ChildrenResource_DeleteMethod::~ChildrenResource_DeleteMethod() {
}


util::Status ChildrenResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "folderId") {
    target->append(client::CppValueToEscapedUrlValue(
        folderId_));
    return client::StatusOk();
  }
  if (variable_name == "childId") {
    target->append(client::CppValueToEscapedUrlValue(
        childId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChildrenResource_GetMethod::ChildrenResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& folderId, const StringPiece& childId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{folderId}/children/{childId}")),
      folderId_(folderId.as_string()),
      childId_(childId.as_string()) {
}

// Standard destructor.
ChildrenResource_GetMethod::~ChildrenResource_GetMethod() {
}


util::Status ChildrenResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "folderId") {
    target->append(client::CppValueToEscapedUrlValue(
        folderId_));
    return client::StatusOk();
  }
  if (variable_name == "childId") {
    target->append(client::CppValueToEscapedUrlValue(
        childId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChildrenResource_InsertMethod::ChildrenResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& folderId, const google_drive_api::ChildReference& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{folderId}/children")),
      folderId_(folderId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
ChildrenResource_InsertMethod::~ChildrenResource_InsertMethod() {
}


util::Status ChildrenResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "folderId") {
    target->append(client::CppValueToEscapedUrlValue(
        folderId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChildrenResource_ListMethod::ChildrenResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& folderId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{folderId}/children")),
      folderId_(folderId.as_string()),
      maxResults_(100),
      _have_q_(false),
      _have_pageToken_(false),
      _have_maxResults_(false) {
}

// Standard destructor.
ChildrenResource_ListMethod::~ChildrenResource_ListMethod() {
}

util::Status ChildrenResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChildrenResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "folderId") {
    target->append(client::CppValueToEscapedUrlValue(
        folderId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
CommentsResource_DeleteMethod::CommentsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()) {
}

// Standard destructor.
CommentsResource_DeleteMethod::~CommentsResource_DeleteMethod() {
}


util::Status CommentsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_GetMethod::CommentsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()),
      includeDeleted_(false),
      _have_includeDeleted_(false) {
}

// Standard destructor.
CommentsResource_GetMethod::~CommentsResource_GetMethod() {
}

util::Status CommentsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_includeDeleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                includeDeleted_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CommentsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_InsertMethod::CommentsResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Comment& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/comments")),
      fileId_(fileId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CommentsResource_InsertMethod::~CommentsResource_InsertMethod() {
}


util::Status CommentsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_ListMethod::CommentsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/comments")),
      fileId_(fileId.as_string()),
      includeDeleted_(false),
      maxResults_(20),
      _have_pageToken_(false),
      _have_updatedMin_(false),
      _have_includeDeleted_(false),
      _have_maxResults_(false) {
}

// Standard destructor.
CommentsResource_ListMethod::~CommentsResource_ListMethod() {
}

util::Status CommentsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_updatedMin_) {
    StrAppend(target, sep, "updatedMin=",
              client::CppValueToEscapedUrlValue(
                updatedMin_));
    sep = "&";
  }
  if (_have_includeDeleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                includeDeleted_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CommentsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_PatchMethod::CommentsResource_PatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const google_drive_api::Comment& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CommentsResource_PatchMethod::~CommentsResource_PatchMethod() {
}


util::Status CommentsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_UpdateMethod::CommentsResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const google_drive_api::Comment& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
CommentsResource_UpdateMethod::~CommentsResource_UpdateMethod() {
}


util::Status CommentsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
FilesResource_CopyMethod::FilesResource_CopyMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::File& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/copy")),
      fileId_(fileId.as_string()),
      convert_(false),
      visibility_("DEFAULT"),
      pinned_(false),
      ocr_(false),
      _have_convert_(false),
      _have_ocrLanguage_(false),
      _have_visibility_(false),
      _have_pinned_(false),
      _have_ocr_(false),
      _have_timedTextTrackName_(false),
      _have_timedTextLanguage_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
FilesResource_CopyMethod::~FilesResource_CopyMethod() {
}

util::Status FilesResource_CopyMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_convert_) {
    StrAppend(target, sep, "convert=",
              client::CppValueToEscapedUrlValue(
                convert_));
    sep = "&";
  }
  if (_have_ocrLanguage_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocrLanguage_));
    sep = "&";
  }
  if (_have_visibility_) {
    StrAppend(target, sep, "visibility=",
              client::CppValueToEscapedUrlValue(
                visibility_));
    sep = "&";
  }
  if (_have_pinned_) {
    StrAppend(target, sep, "pinned=",
              client::CppValueToEscapedUrlValue(
                pinned_));
    sep = "&";
  }
  if (_have_ocr_) {
    StrAppend(target, sep, "ocr=",
              client::CppValueToEscapedUrlValue(
                ocr_));
    sep = "&";
  }
  if (_have_timedTextTrackName_) {
    StrAppend(target, sep, "timedTextTrackName=",
              client::CppValueToEscapedUrlValue(
                timedTextTrackName_));
    sep = "&";
  }
  if (_have_timedTextLanguage_) {
    StrAppend(target, sep, "timedTextLanguage=",
              client::CppValueToEscapedUrlValue(
                timedTextLanguage_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_CopyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_DeleteMethod::FilesResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
FilesResource_DeleteMethod::~FilesResource_DeleteMethod() {
}


util::Status FilesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_GetMethod::FilesResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}")),
      fileId_(fileId.as_string()),
      updateViewedDate_(false),
      _have_updateViewedDate_(false),
      _have_projection_(false) {
}

// Standard destructor.
FilesResource_GetMethod::~FilesResource_GetMethod() {
}

util::Status FilesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_updateViewedDate_) {
    StrAppend(target, sep, "updateViewedDate=",
              client::CppValueToEscapedUrlValue(
                updateViewedDate_));
    sep = "&";
  }
  if (_have_projection_) {
    StrAppend(target, sep, "projection=",
              client::CppValueToEscapedUrlValue(
                projection_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
FilesResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/drive/v2/files", true);


// static
const client::MediaUploadSpec
FilesResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/drive/v2/files", true);


util::Status FilesResource_InsertMethod::Execute() {
  client::HttpRequest* request = mutable_http_request();
  util::Status status =
    _uploader_->BuildRequest(
        request,
        NewCallback(this, &FilesResource_InsertMethod::PrepareUrl));
  if (!status.ok()) {
    return status;
  }

  return _uploader_->Upload(request);
}

// Standard constructor.
FilesResource_InsertMethod::FilesResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files")),
      convert_(false),
      useContentAsIndexableText_(false),
      visibility_("DEFAULT"),
      pinned_(false),
      ocr_(false),
      _have_convert_(false),
      _have_useContentAsIndexableText_(false),
      _have_ocrLanguage_(false),
      _have_visibility_(false),
      _have_pinned_(false),
      _have_ocr_(false),
      _have_timedTextTrackName_(false),
      _have_timedTextLanguage_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "files")));
}

// Standard destructor.
FilesResource_InsertMethod::~FilesResource_InsertMethod() {
}

util::Status FilesResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_convert_) {
    StrAppend(target, sep, "convert=",
              client::CppValueToEscapedUrlValue(
                convert_));
    sep = "&";
  }
  if (_have_useContentAsIndexableText_) {
    StrAppend(target, sep, "useContentAsIndexableText=",
              client::CppValueToEscapedUrlValue(
                useContentAsIndexableText_));
    sep = "&";
  }
  if (_have_ocrLanguage_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocrLanguage_));
    sep = "&";
  }
  if (_have_visibility_) {
    StrAppend(target, sep, "visibility=",
              client::CppValueToEscapedUrlValue(
                visibility_));
    sep = "&";
  }
  if (_have_pinned_) {
    StrAppend(target, sep, "pinned=",
              client::CppValueToEscapedUrlValue(
                pinned_));
    sep = "&";
  }
  if (_have_ocr_) {
    StrAppend(target, sep, "ocr=",
              client::CppValueToEscapedUrlValue(
                ocr_));
    sep = "&";
  }
  if (_have_timedTextTrackName_) {
    StrAppend(target, sep, "timedTextTrackName=",
              client::CppValueToEscapedUrlValue(
                timedTextTrackName_));
    sep = "&";
  }
  if (_have_timedTextLanguage_) {
    StrAppend(target, sep, "timedTextLanguage=",
              client::CppValueToEscapedUrlValue(
                timedTextLanguage_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_ListMethod::FilesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files")),
      maxResults_(100),
      _have_q_(false),
      _have_pageToken_(false),
      _have_projection_(false),
      _have_maxResults_(false) {
}

// Standard destructor.
FilesResource_ListMethod::~FilesResource_ListMethod() {
}

util::Status FilesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_projection_) {
    StrAppend(target, sep, "projection=",
              client::CppValueToEscapedUrlValue(
                projection_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_PatchMethod::FilesResource_PatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::File& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "files/{fileId}")),
      fileId_(fileId.as_string()),
      convert_(false),
      updateViewedDate_(true),
      setModifiedDate_(false),
      useContentAsIndexableText_(false),
      pinned_(false),
      newRevision_(true),
      ocr_(false),
      _have_convert_(false),
      _have_updateViewedDate_(false),
      _have_setModifiedDate_(false),
      _have_useContentAsIndexableText_(false),
      _have_ocrLanguage_(false),
      _have_pinned_(false),
      _have_newRevision_(false),
      _have_ocr_(false),
      _have_timedTextLanguage_(false),
      _have_timedTextTrackName_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
FilesResource_PatchMethod::~FilesResource_PatchMethod() {
}

util::Status FilesResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_convert_) {
    StrAppend(target, sep, "convert=",
              client::CppValueToEscapedUrlValue(
                convert_));
    sep = "&";
  }
  if (_have_updateViewedDate_) {
    StrAppend(target, sep, "updateViewedDate=",
              client::CppValueToEscapedUrlValue(
                updateViewedDate_));
    sep = "&";
  }
  if (_have_setModifiedDate_) {
    StrAppend(target, sep, "setModifiedDate=",
              client::CppValueToEscapedUrlValue(
                setModifiedDate_));
    sep = "&";
  }
  if (_have_useContentAsIndexableText_) {
    StrAppend(target, sep, "useContentAsIndexableText=",
              client::CppValueToEscapedUrlValue(
                useContentAsIndexableText_));
    sep = "&";
  }
  if (_have_ocrLanguage_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocrLanguage_));
    sep = "&";
  }
  if (_have_pinned_) {
    StrAppend(target, sep, "pinned=",
              client::CppValueToEscapedUrlValue(
                pinned_));
    sep = "&";
  }
  if (_have_newRevision_) {
    StrAppend(target, sep, "newRevision=",
              client::CppValueToEscapedUrlValue(
                newRevision_));
    sep = "&";
  }
  if (_have_ocr_) {
    StrAppend(target, sep, "ocr=",
              client::CppValueToEscapedUrlValue(
                ocr_));
    sep = "&";
  }
  if (_have_timedTextLanguage_) {
    StrAppend(target, sep, "timedTextLanguage=",
              client::CppValueToEscapedUrlValue(
                timedTextLanguage_));
    sep = "&";
  }
  if (_have_timedTextTrackName_) {
    StrAppend(target, sep, "timedTextTrackName=",
              client::CppValueToEscapedUrlValue(
                timedTextTrackName_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_TouchMethod::FilesResource_TouchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/touch")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
FilesResource_TouchMethod::~FilesResource_TouchMethod() {
}


util::Status FilesResource_TouchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_TrashMethod::FilesResource_TrashMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/trash")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
FilesResource_TrashMethod::~FilesResource_TrashMethod() {
}


util::Status FilesResource_TrashMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_UntrashMethod::FilesResource_UntrashMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/untrash")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
FilesResource_UntrashMethod::~FilesResource_UntrashMethod() {
}


util::Status FilesResource_UntrashMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
FilesResource_UpdateMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/drive/v2/files/{fileId}", true);


// static
const client::MediaUploadSpec
FilesResource_UpdateMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/drive/v2/files/{fileId}", true);


util::Status FilesResource_UpdateMethod::Execute() {
  client::HttpRequest* request = mutable_http_request();
  util::Status status =
    _uploader_->BuildRequest(
        request,
        NewCallback(this, &FilesResource_UpdateMethod::PrepareUrl));
  if (!status.ok()) {
    return status;
  }

  return _uploader_->Upload(request);
}

// Standard constructor.
FilesResource_UpdateMethod::FilesResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "files/{fileId}")),
      fileId_(fileId.as_string()),
      convert_(false),
      updateViewedDate_(true),
      setModifiedDate_(false),
      useContentAsIndexableText_(false),
      pinned_(false),
      newRevision_(true),
      ocr_(false),
      _have_convert_(false),
      _have_updateViewedDate_(false),
      _have_setModifiedDate_(false),
      _have_useContentAsIndexableText_(false),
      _have_ocrLanguage_(false),
      _have_pinned_(false),
      _have_newRevision_(false),
      _have_ocr_(false),
      _have_timedTextLanguage_(false),
      _have_timedTextTrackName_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "files/{fileId}")));
}

// Standard destructor.
FilesResource_UpdateMethod::~FilesResource_UpdateMethod() {
}

util::Status FilesResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_convert_) {
    StrAppend(target, sep, "convert=",
              client::CppValueToEscapedUrlValue(
                convert_));
    sep = "&";
  }
  if (_have_updateViewedDate_) {
    StrAppend(target, sep, "updateViewedDate=",
              client::CppValueToEscapedUrlValue(
                updateViewedDate_));
    sep = "&";
  }
  if (_have_setModifiedDate_) {
    StrAppend(target, sep, "setModifiedDate=",
              client::CppValueToEscapedUrlValue(
                setModifiedDate_));
    sep = "&";
  }
  if (_have_useContentAsIndexableText_) {
    StrAppend(target, sep, "useContentAsIndexableText=",
              client::CppValueToEscapedUrlValue(
                useContentAsIndexableText_));
    sep = "&";
  }
  if (_have_ocrLanguage_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocrLanguage_));
    sep = "&";
  }
  if (_have_pinned_) {
    StrAppend(target, sep, "pinned=",
              client::CppValueToEscapedUrlValue(
                pinned_));
    sep = "&";
  }
  if (_have_newRevision_) {
    StrAppend(target, sep, "newRevision=",
              client::CppValueToEscapedUrlValue(
                newRevision_));
    sep = "&";
  }
  if (_have_ocr_) {
    StrAppend(target, sep, "ocr=",
              client::CppValueToEscapedUrlValue(
                ocr_));
    sep = "&";
  }
  if (_have_timedTextLanguage_) {
    StrAppend(target, sep, "timedTextLanguage=",
              client::CppValueToEscapedUrlValue(
                timedTextLanguage_));
    sep = "&";
  }
  if (_have_timedTextTrackName_) {
    StrAppend(target, sep, "timedTextTrackName=",
              client::CppValueToEscapedUrlValue(
                timedTextTrackName_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_WatchMethod::FilesResource_WatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Channel& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/watch")),
      fileId_(fileId.as_string()),
      updateViewedDate_(false),
      _have_updateViewedDate_(false),
      _have_projection_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
FilesResource_WatchMethod::~FilesResource_WatchMethod() {
}

util::Status FilesResource_WatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_updateViewedDate_) {
    StrAppend(target, sep, "updateViewedDate=",
              client::CppValueToEscapedUrlValue(
                updateViewedDate_));
    sep = "&";
  }
  if (_have_projection_) {
    StrAppend(target, sep, "projection=",
              client::CppValueToEscapedUrlValue(
                projection_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_WatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
ParentsResource_DeleteMethod::ParentsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& parentId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}/parents/{parentId}")),
      fileId_(fileId.as_string()),
      parentId_(parentId.as_string()) {
}

// Standard destructor.
ParentsResource_DeleteMethod::~ParentsResource_DeleteMethod() {
}


util::Status ParentsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "parentId") {
    target->append(client::CppValueToEscapedUrlValue(
        parentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ParentsResource_GetMethod::ParentsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& parentId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/parents/{parentId}")),
      fileId_(fileId.as_string()),
      parentId_(parentId.as_string()) {
}

// Standard destructor.
ParentsResource_GetMethod::~ParentsResource_GetMethod() {
}


util::Status ParentsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "parentId") {
    target->append(client::CppValueToEscapedUrlValue(
        parentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ParentsResource_InsertMethod::ParentsResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::ParentReference& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/parents")),
      fileId_(fileId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
ParentsResource_InsertMethod::~ParentsResource_InsertMethod() {
}


util::Status ParentsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ParentsResource_ListMethod::ParentsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/parents")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
ParentsResource_ListMethod::~ParentsResource_ListMethod() {
}


util::Status ParentsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
PermissionsResource_DeleteMethod::PermissionsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}/permissions/{permissionId}")),
      fileId_(fileId.as_string()),
      permissionId_(permissionId.as_string()) {
}

// Standard destructor.
PermissionsResource_DeleteMethod::~PermissionsResource_DeleteMethod() {
}


util::Status PermissionsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    target->append(client::CppValueToEscapedUrlValue(
        permissionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_GetMethod::PermissionsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/permissions/{permissionId}")),
      fileId_(fileId.as_string()),
      permissionId_(permissionId.as_string()) {
}

// Standard destructor.
PermissionsResource_GetMethod::~PermissionsResource_GetMethod() {
}


util::Status PermissionsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    target->append(client::CppValueToEscapedUrlValue(
        permissionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_InsertMethod::PermissionsResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Permission& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/permissions")),
      fileId_(fileId.as_string()),
      sendNotificationEmails_(true),
      _have_emailMessage_(false),
      _have_sendNotificationEmails_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
PermissionsResource_InsertMethod::~PermissionsResource_InsertMethod() {
}

util::Status PermissionsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_emailMessage_) {
    StrAppend(target, sep, "emailMessage=",
              client::CppValueToEscapedUrlValue(
                emailMessage_));
    sep = "&";
  }
  if (_have_sendNotificationEmails_) {
    StrAppend(target, sep, "sendNotificationEmails=",
              client::CppValueToEscapedUrlValue(
                sendNotificationEmails_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PermissionsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_ListMethod::PermissionsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/permissions")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
PermissionsResource_ListMethod::~PermissionsResource_ListMethod() {
}


util::Status PermissionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_PatchMethod::PermissionsResource_PatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId, const google_drive_api::Permission& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "files/{fileId}/permissions/{permissionId}")),
      fileId_(fileId.as_string()),
      permissionId_(permissionId.as_string()),
      transferOwnership_(false),
      _have_transferOwnership_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
PermissionsResource_PatchMethod::~PermissionsResource_PatchMethod() {
}

util::Status PermissionsResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_transferOwnership_) {
    StrAppend(target, sep, "transferOwnership=",
              client::CppValueToEscapedUrlValue(
                transferOwnership_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PermissionsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    target->append(client::CppValueToEscapedUrlValue(
        permissionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_UpdateMethod::PermissionsResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId, const google_drive_api::Permission& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "files/{fileId}/permissions/{permissionId}")),
      fileId_(fileId.as_string()),
      permissionId_(permissionId.as_string()),
      transferOwnership_(false),
      _have_transferOwnership_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
PermissionsResource_UpdateMethod::~PermissionsResource_UpdateMethod() {
}

util::Status PermissionsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_transferOwnership_) {
    StrAppend(target, sep, "transferOwnership=",
              client::CppValueToEscapedUrlValue(
                transferOwnership_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PermissionsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    target->append(client::CppValueToEscapedUrlValue(
        permissionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
PropertiesResource_DeleteMethod::PropertiesResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}/properties/{propertyKey}")),
      fileId_(fileId.as_string()),
      propertyKey_(propertyKey.as_string()),
      visibility_("private"),
      _have_visibility_(false) {
}

// Standard destructor.
PropertiesResource_DeleteMethod::~PropertiesResource_DeleteMethod() {
}

util::Status PropertiesResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_visibility_) {
    StrAppend(target, sep, "visibility=",
              client::CppValueToEscapedUrlValue(
                visibility_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PropertiesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "propertyKey") {
    target->append(client::CppValueToEscapedUrlValue(
        propertyKey_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PropertiesResource_GetMethod::PropertiesResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/properties/{propertyKey}")),
      fileId_(fileId.as_string()),
      propertyKey_(propertyKey.as_string()),
      visibility_("private"),
      _have_visibility_(false) {
}

// Standard destructor.
PropertiesResource_GetMethod::~PropertiesResource_GetMethod() {
}

util::Status PropertiesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_visibility_) {
    StrAppend(target, sep, "visibility=",
              client::CppValueToEscapedUrlValue(
                visibility_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PropertiesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "propertyKey") {
    target->append(client::CppValueToEscapedUrlValue(
        propertyKey_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PropertiesResource_InsertMethod::PropertiesResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Property& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/properties")),
      fileId_(fileId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
PropertiesResource_InsertMethod::~PropertiesResource_InsertMethod() {
}


util::Status PropertiesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PropertiesResource_ListMethod::PropertiesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/properties")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
PropertiesResource_ListMethod::~PropertiesResource_ListMethod() {
}


util::Status PropertiesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PropertiesResource_PatchMethod::PropertiesResource_PatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey, const google_drive_api::Property& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "files/{fileId}/properties/{propertyKey}")),
      fileId_(fileId.as_string()),
      propertyKey_(propertyKey.as_string()),
      visibility_("private"),
      _have_visibility_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
PropertiesResource_PatchMethod::~PropertiesResource_PatchMethod() {
}

util::Status PropertiesResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_visibility_) {
    StrAppend(target, sep, "visibility=",
              client::CppValueToEscapedUrlValue(
                visibility_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PropertiesResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "propertyKey") {
    target->append(client::CppValueToEscapedUrlValue(
        propertyKey_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PropertiesResource_UpdateMethod::PropertiesResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey, const google_drive_api::Property& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "files/{fileId}/properties/{propertyKey}")),
      fileId_(fileId.as_string()),
      propertyKey_(propertyKey.as_string()),
      visibility_("private"),
      _have_visibility_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
PropertiesResource_UpdateMethod::~PropertiesResource_UpdateMethod() {
}

util::Status PropertiesResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_visibility_) {
    StrAppend(target, sep, "visibility=",
              client::CppValueToEscapedUrlValue(
                visibility_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PropertiesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "propertyKey") {
    target->append(client::CppValueToEscapedUrlValue(
        propertyKey_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
RealtimeResource_GetMethod::RealtimeResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/realtime")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
RealtimeResource_GetMethod::~RealtimeResource_GetMethod() {
}


util::Status RealtimeResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
RepliesResource_DeleteMethod::RepliesResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}/replies/{replyId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()),
      replyId_(replyId.as_string()) {
}

// Standard destructor.
RepliesResource_DeleteMethod::~RepliesResource_DeleteMethod() {
}


util::Status RepliesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    target->append(client::CppValueToEscapedUrlValue(
        replyId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_GetMethod::RepliesResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}/replies/{replyId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()),
      replyId_(replyId.as_string()),
      includeDeleted_(false),
      _have_includeDeleted_(false) {
}

// Standard destructor.
RepliesResource_GetMethod::~RepliesResource_GetMethod() {
}

util::Status RepliesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_includeDeleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                includeDeleted_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RepliesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    target->append(client::CppValueToEscapedUrlValue(
        replyId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_InsertMethod::RepliesResource_InsertMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const google_drive_api::CommentReply& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}/replies")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
RepliesResource_InsertMethod::~RepliesResource_InsertMethod() {
}


util::Status RepliesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_ListMethod::RepliesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}/replies")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()),
      includeDeleted_(false),
      maxResults_(20),
      _have_pageToken_(false),
      _have_includeDeleted_(false),
      _have_maxResults_(false) {
}

// Standard destructor.
RepliesResource_ListMethod::~RepliesResource_ListMethod() {
}

util::Status RepliesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_pageToken_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                pageToken_));
    sep = "&";
  }
  if (_have_includeDeleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                includeDeleted_));
    sep = "&";
  }
  if (_have_maxResults_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                maxResults_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RepliesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_PatchMethod::RepliesResource_PatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId, const google_drive_api::CommentReply& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}/replies/{replyId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()),
      replyId_(replyId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
RepliesResource_PatchMethod::~RepliesResource_PatchMethod() {
}


util::Status RepliesResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    target->append(client::CppValueToEscapedUrlValue(
        replyId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_UpdateMethod::RepliesResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId, const google_drive_api::CommentReply& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "files/{fileId}/comments/{commentId}/replies/{replyId}")),
      fileId_(fileId.as_string()),
      commentId_(commentId.as_string()),
      replyId_(replyId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
RepliesResource_UpdateMethod::~RepliesResource_UpdateMethod() {
}


util::Status RepliesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    target->append(client::CppValueToEscapedUrlValue(
        commentId_));
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    target->append(client::CppValueToEscapedUrlValue(
        replyId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}

// Standard constructor.
RevisionsResource_DeleteMethod::RevisionsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::DELETE,
      StrCat(_service_->service_url(), "files/{fileId}/revisions/{revisionId}")),
      fileId_(fileId.as_string()),
      revisionId_(revisionId.as_string()) {
}

// Standard destructor.
RevisionsResource_DeleteMethod::~RevisionsResource_DeleteMethod() {
}


util::Status RevisionsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    target->append(client::CppValueToEscapedUrlValue(
        revisionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_GetMethod::RevisionsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/revisions/{revisionId}")),
      fileId_(fileId.as_string()),
      revisionId_(revisionId.as_string()) {
}

// Standard destructor.
RevisionsResource_GetMethod::~RevisionsResource_GetMethod() {
}


util::Status RevisionsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    target->append(client::CppValueToEscapedUrlValue(
        revisionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_ListMethod::RevisionsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::GET,
      StrCat(_service_->service_url(), "files/{fileId}/revisions")),
      fileId_(fileId.as_string()) {
}

// Standard destructor.
RevisionsResource_ListMethod::~RevisionsResource_ListMethod() {
}


util::Status RevisionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_PatchMethod::RevisionsResource_PatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId, const google_drive_api::Revision& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      StrCat(_service_->service_url(), "files/{fileId}/revisions/{revisionId}")),
      fileId_(fileId.as_string()),
      revisionId_(revisionId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
RevisionsResource_PatchMethod::~RevisionsResource_PatchMethod() {
}


util::Status RevisionsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    target->append(client::CppValueToEscapedUrlValue(
        revisionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_UpdateMethod::RevisionsResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId, const google_drive_api::Revision& _content_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      StrCat(_service_->service_url(), "files/{fileId}/revisions/{revisionId}")),
      fileId_(fileId.as_string()),
      revisionId_(revisionId.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(_content_.MakeJsonReader());
}

// Standard destructor.
RevisionsResource_UpdateMethod::~RevisionsResource_UpdateMethod() {
}


util::Status RevisionsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    target->append(client::CppValueToEscapedUrlValue(
        fileId_));
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    target->append(client::CppValueToEscapedUrlValue(
        revisionId_));
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



DriveService::DriveService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "drive/v2/", transport), about_(this), apps_(this), changes_(this), channels_(this), children_(this), comments_(this), files_(this), parents_(this), permissions_(this), properties_(this), realtime_(this), replies_(this), revisions_(this) {
}

DriveService::~DriveService() {
}

DriveService::AboutResource::AboutResource(DriveService* service)
  : service_(service) {
}

DriveService::AboutResource::~AboutResource() {
}



AboutResource_GetMethod* DriveService::AboutResource::NewGetMethod(client::AuthorizationCredential* _credential_) const {
  return new AboutResource_GetMethod(service_, _credential_);
}DriveService::AppsResource::AppsResource(DriveService* service)
  : service_(service) {
}

DriveService::AppsResource::~AppsResource() {
}



AppsResource_GetMethod* DriveService::AppsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& appId) const {
  return new AppsResource_GetMethod(service_, _credential_, appId);
}



AppsResource_ListMethod* DriveService::AppsResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new AppsResource_ListMethod(service_, _credential_);
}DriveService::ChangesResource::ChangesResource(DriveService* service)
  : service_(service) {
}

DriveService::ChangesResource::~ChangesResource() {
}



ChangesResource_GetMethod* DriveService::ChangesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& changeId) const {
  return new ChangesResource_GetMethod(service_, _credential_, changeId);
}



ChangesResource_ListMethod* DriveService::ChangesResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new ChangesResource_ListMethod(service_, _credential_);
} 

ChangesResource_ListMethodPager* DriveService::ChangesResource::NewListMethodPager(client::AuthorizationCredential* _credential_) const {
  return new client::EncapsulatedServiceRequestPager<ChangesResource_ListMethod, ChangeList>(new ChangesResource_ListMethod(service_, _credential_));
}



ChangesResource_WatchMethod* DriveService::ChangesResource::NewWatchMethod(client::AuthorizationCredential* _credential_, const google_drive_api::Channel& _content_) const {
  return new ChangesResource_WatchMethod(service_, _credential_, _content_);
}DriveService::ChannelsResource::ChannelsResource(DriveService* service)
  : service_(service) {
}

DriveService::ChannelsResource::~ChannelsResource() {
}



ChannelsResource_StopMethod* DriveService::ChannelsResource::NewStopMethod(client::AuthorizationCredential* _credential_, const google_drive_api::Channel& _content_) const {
  return new ChannelsResource_StopMethod(service_, _credential_, _content_);
}DriveService::ChildrenResource::ChildrenResource(DriveService* service)
  : service_(service) {
}

DriveService::ChildrenResource::~ChildrenResource() {
}



ChildrenResource_DeleteMethod* DriveService::ChildrenResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& folderId, const StringPiece& childId) const {
  return new ChildrenResource_DeleteMethod(service_, _credential_, folderId, childId);
}



ChildrenResource_GetMethod* DriveService::ChildrenResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& folderId, const StringPiece& childId) const {
  return new ChildrenResource_GetMethod(service_, _credential_, folderId, childId);
}



ChildrenResource_InsertMethod* DriveService::ChildrenResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& folderId, const google_drive_api::ChildReference& _content_) const {
  return new ChildrenResource_InsertMethod(service_, _credential_, folderId, _content_);
}



ChildrenResource_ListMethod* DriveService::ChildrenResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& folderId) const {
  return new ChildrenResource_ListMethod(service_, _credential_, folderId);
} 

ChildrenResource_ListMethodPager* DriveService::ChildrenResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& folderId) const {
  return new client::EncapsulatedServiceRequestPager<ChildrenResource_ListMethod, ChildList>(new ChildrenResource_ListMethod(service_, _credential_, folderId));
}DriveService::CommentsResource::CommentsResource(DriveService* service)
  : service_(service) {
}

DriveService::CommentsResource::~CommentsResource() {
}



CommentsResource_DeleteMethod* DriveService::CommentsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId) const {
  return new CommentsResource_DeleteMethod(service_, _credential_, fileId, commentId);
}



CommentsResource_GetMethod* DriveService::CommentsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId) const {
  return new CommentsResource_GetMethod(service_, _credential_, fileId, commentId);
}



CommentsResource_InsertMethod* DriveService::CommentsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Comment& _content_) const {
  return new CommentsResource_InsertMethod(service_, _credential_, fileId, _content_);
}



CommentsResource_ListMethod* DriveService::CommentsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new CommentsResource_ListMethod(service_, _credential_, fileId);
} 

CommentsResource_ListMethodPager* DriveService::CommentsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new client::EncapsulatedServiceRequestPager<CommentsResource_ListMethod, CommentList>(new CommentsResource_ListMethod(service_, _credential_, fileId));
}



CommentsResource_PatchMethod* DriveService::CommentsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const google_drive_api::Comment& _content_) const {
  return new CommentsResource_PatchMethod(service_, _credential_, fileId, commentId, _content_);
}



CommentsResource_UpdateMethod* DriveService::CommentsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const google_drive_api::Comment& _content_) const {
  return new CommentsResource_UpdateMethod(service_, _credential_, fileId, commentId, _content_);
}DriveService::FilesResource::FilesResource(DriveService* service)
  : service_(service) {
}

DriveService::FilesResource::~FilesResource() {
}



FilesResource_CopyMethod* DriveService::FilesResource::NewCopyMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::File& _content_) const {
  return new FilesResource_CopyMethod(service_, _credential_, fileId, _content_);
}



FilesResource_DeleteMethod* DriveService::FilesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new FilesResource_DeleteMethod(service_, _credential_, fileId);
}



FilesResource_GetMethod* DriveService::FilesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new FilesResource_GetMethod(service_, _credential_, fileId);
}



FilesResource_InsertMethod* DriveService::FilesResource::NewInsertMethod(client::AuthorizationCredential* _credential_) const {
  return new FilesResource_InsertMethod(service_, _credential_);
}



FilesResource_ListMethod* DriveService::FilesResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new FilesResource_ListMethod(service_, _credential_);
} 

FilesResource_ListMethodPager* DriveService::FilesResource::NewListMethodPager(client::AuthorizationCredential* _credential_) const {
  return new client::EncapsulatedServiceRequestPager<FilesResource_ListMethod, FileList>(new FilesResource_ListMethod(service_, _credential_));
}



FilesResource_PatchMethod* DriveService::FilesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::File& _content_) const {
  return new FilesResource_PatchMethod(service_, _credential_, fileId, _content_);
}



FilesResource_TouchMethod* DriveService::FilesResource::NewTouchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new FilesResource_TouchMethod(service_, _credential_, fileId);
}



FilesResource_TrashMethod* DriveService::FilesResource::NewTrashMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new FilesResource_TrashMethod(service_, _credential_, fileId);
}



FilesResource_UntrashMethod* DriveService::FilesResource::NewUntrashMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new FilesResource_UntrashMethod(service_, _credential_, fileId);
}



FilesResource_UpdateMethod* DriveService::FilesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new FilesResource_UpdateMethod(service_, _credential_, fileId);
}



FilesResource_WatchMethod* DriveService::FilesResource::NewWatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Channel& _content_) const {
  return new FilesResource_WatchMethod(service_, _credential_, fileId, _content_);
}DriveService::ParentsResource::ParentsResource(DriveService* service)
  : service_(service) {
}

DriveService::ParentsResource::~ParentsResource() {
}



ParentsResource_DeleteMethod* DriveService::ParentsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& parentId) const {
  return new ParentsResource_DeleteMethod(service_, _credential_, fileId, parentId);
}



ParentsResource_GetMethod* DriveService::ParentsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& parentId) const {
  return new ParentsResource_GetMethod(service_, _credential_, fileId, parentId);
}



ParentsResource_InsertMethod* DriveService::ParentsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::ParentReference& _content_) const {
  return new ParentsResource_InsertMethod(service_, _credential_, fileId, _content_);
}



ParentsResource_ListMethod* DriveService::ParentsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new ParentsResource_ListMethod(service_, _credential_, fileId);
}DriveService::PermissionsResource::PermissionsResource(DriveService* service)
  : service_(service) {
}

DriveService::PermissionsResource::~PermissionsResource() {
}



PermissionsResource_DeleteMethod* DriveService::PermissionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId) const {
  return new PermissionsResource_DeleteMethod(service_, _credential_, fileId, permissionId);
}



PermissionsResource_GetMethod* DriveService::PermissionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId) const {
  return new PermissionsResource_GetMethod(service_, _credential_, fileId, permissionId);
}



PermissionsResource_InsertMethod* DriveService::PermissionsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Permission& _content_) const {
  return new PermissionsResource_InsertMethod(service_, _credential_, fileId, _content_);
}



PermissionsResource_ListMethod* DriveService::PermissionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new PermissionsResource_ListMethod(service_, _credential_, fileId);
}



PermissionsResource_PatchMethod* DriveService::PermissionsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId, const google_drive_api::Permission& _content_) const {
  return new PermissionsResource_PatchMethod(service_, _credential_, fileId, permissionId, _content_);
}



PermissionsResource_UpdateMethod* DriveService::PermissionsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& permissionId, const google_drive_api::Permission& _content_) const {
  return new PermissionsResource_UpdateMethod(service_, _credential_, fileId, permissionId, _content_);
}DriveService::PropertiesResource::PropertiesResource(DriveService* service)
  : service_(service) {
}

DriveService::PropertiesResource::~PropertiesResource() {
}



PropertiesResource_DeleteMethod* DriveService::PropertiesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey) const {
  return new PropertiesResource_DeleteMethod(service_, _credential_, fileId, propertyKey);
}



PropertiesResource_GetMethod* DriveService::PropertiesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey) const {
  return new PropertiesResource_GetMethod(service_, _credential_, fileId, propertyKey);
}



PropertiesResource_InsertMethod* DriveService::PropertiesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const google_drive_api::Property& _content_) const {
  return new PropertiesResource_InsertMethod(service_, _credential_, fileId, _content_);
}



PropertiesResource_ListMethod* DriveService::PropertiesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new PropertiesResource_ListMethod(service_, _credential_, fileId);
}



PropertiesResource_PatchMethod* DriveService::PropertiesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey, const google_drive_api::Property& _content_) const {
  return new PropertiesResource_PatchMethod(service_, _credential_, fileId, propertyKey, _content_);
}



PropertiesResource_UpdateMethod* DriveService::PropertiesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& propertyKey, const google_drive_api::Property& _content_) const {
  return new PropertiesResource_UpdateMethod(service_, _credential_, fileId, propertyKey, _content_);
}DriveService::RealtimeResource::RealtimeResource(DriveService* service)
  : service_(service) {
}

DriveService::RealtimeResource::~RealtimeResource() {
}



RealtimeResource_GetMethod* DriveService::RealtimeResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new RealtimeResource_GetMethod(service_, _credential_, fileId);
}DriveService::RepliesResource::RepliesResource(DriveService* service)
  : service_(service) {
}

DriveService::RepliesResource::~RepliesResource() {
}



RepliesResource_DeleteMethod* DriveService::RepliesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId) const {
  return new RepliesResource_DeleteMethod(service_, _credential_, fileId, commentId, replyId);
}



RepliesResource_GetMethod* DriveService::RepliesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId) const {
  return new RepliesResource_GetMethod(service_, _credential_, fileId, commentId, replyId);
}



RepliesResource_InsertMethod* DriveService::RepliesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const google_drive_api::CommentReply& _content_) const {
  return new RepliesResource_InsertMethod(service_, _credential_, fileId, commentId, _content_);
}



RepliesResource_ListMethod* DriveService::RepliesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId) const {
  return new RepliesResource_ListMethod(service_, _credential_, fileId, commentId);
} 

RepliesResource_ListMethodPager* DriveService::RepliesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId) const {
  return new client::EncapsulatedServiceRequestPager<RepliesResource_ListMethod, CommentReplyList>(new RepliesResource_ListMethod(service_, _credential_, fileId, commentId));
}



RepliesResource_PatchMethod* DriveService::RepliesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId, const google_drive_api::CommentReply& _content_) const {
  return new RepliesResource_PatchMethod(service_, _credential_, fileId, commentId, replyId, _content_);
}



RepliesResource_UpdateMethod* DriveService::RepliesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& commentId, const StringPiece& replyId, const google_drive_api::CommentReply& _content_) const {
  return new RepliesResource_UpdateMethod(service_, _credential_, fileId, commentId, replyId, _content_);
}DriveService::RevisionsResource::RevisionsResource(DriveService* service)
  : service_(service) {
}

DriveService::RevisionsResource::~RevisionsResource() {
}



RevisionsResource_DeleteMethod* DriveService::RevisionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId) const {
  return new RevisionsResource_DeleteMethod(service_, _credential_, fileId, revisionId);
}



RevisionsResource_GetMethod* DriveService::RevisionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId) const {
  return new RevisionsResource_GetMethod(service_, _credential_, fileId, revisionId);
}



RevisionsResource_ListMethod* DriveService::RevisionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId) const {
  return new RevisionsResource_ListMethod(service_, _credential_, fileId);
}



RevisionsResource_PatchMethod* DriveService::RevisionsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId, const google_drive_api::Revision& _content_) const {
  return new RevisionsResource_PatchMethod(service_, _credential_, fileId, revisionId, _content_);
}



RevisionsResource_UpdateMethod* DriveService::RevisionsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& fileId, const StringPiece& revisionId, const google_drive_api::Revision& _content_) const {
  return new RevisionsResource_UpdateMethod(service_, _credential_, fileId, revisionId, _content_);
}
}  // namespace google_drive_api
