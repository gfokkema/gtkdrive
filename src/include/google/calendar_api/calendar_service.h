// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.4.1
//   Build date: 2013-08-07 19:00:49 UTC
//   on: 2013-08-13, 01:30:06 UTC
//   C++ generator version:
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_CALENDAR_API_CALENDAR_SERVICE_H_
#define  GOOGLE_CALENDAR_API_CALENDAR_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/base/scoped_ptr.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/calendar_api/acl.h"
#include "google/calendar_api/acl_rule.h"
#include "google/calendar_api/calendar.h"
#include "google/calendar_api/calendar_list.h"
#include "google/calendar_api/calendar_list_entry.h"
#include "google/calendar_api/channel.h"
#include "google/calendar_api/colors.h"
#include "google/calendar_api/event.h"
#include "google/calendar_api/events.h"
#include "google/calendar_api/free_busy_request.h"
#include "google/calendar_api/free_busy_response.h"
#include "google/calendar_api/setting.h"
#include "google/calendar_api/settings.h"


namespace google_calendar_api {
using namespace googleapis;
/**
 * \mainpage
 *   Calendar API Version v3
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/google-apps/calendar/firstapp'>Calendar API</a>
 *      <tr><th>API Version<td>v3
 *      <tr><th>API Rev<td>55
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/google-apps/calendar/firstapp'>
 *              https://developers.google.com/google-apps/calendar/firstapp</a>
 *      <tr><th>Discovery Name<td>calendar
 *      <tr><th>Generated At<td>2013-08-13 01:30:06 UTC
 *      <tr><th>C++ Generator<td>google-apis-code-generator
 *      <tr><th>Generator Version
 *          <td>1.4.1 / c++=0.1
 *      <tr><th>Generator Build<td>2013-08-07 19:00:49 UTC
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Calendar API can be found at
 * <a href='https://developers.google.com/google-apps/calendar/firstapp'>https://developers.google.com/google-apps/calendar/firstapp</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class CalendarService;

/**
 * Implements a common base method for all methods within the CalendarService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class CalendarServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  CalendarServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~CalendarServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }

  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }

  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }


  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }

  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }

  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }


  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }

  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }

  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }


  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauthToken() {
    _have_oauthToken_ = false;
    client::ClearCppValueHelper(&oauthToken_);
  }

  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauthToken() const { return oauthToken_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauthToken_ = true;
    return &oauthToken_;
  }

  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauthToken(const string& value) {
    _have_oauthToken_ = true;
    oauthToken_ = value;
  }


  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_prettyPrint() {
    _have_prettyPrint_ = false;
    client::ClearCppValueHelper(&prettyPrint_);
  }

  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_prettyPrint() const { return prettyPrint_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_prettyPrint(bool value) {
    _have_prettyPrint_ = true;
    prettyPrint_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quotaUser() {
    _have_quotaUser_ = false;
    client::ClearCppValueHelper(&quotaUser_);
  }

  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quotaUser() const { return quotaUser_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quotaUser_ = true;
    return &quotaUser_;
  }

  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quotaUser(const string& value) {
    _have_quotaUser_ = true;
    quotaUser_ = value;
  }


  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_userIp() {
    _have_userIp_ = false;
    client::ClearCppValueHelper(&userIp_);
  }

  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_userIp() const { return userIp_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_userIp_ = true;
    return &userIp_;
  }

  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_userIp(const string& value) {
    _have_userIp_ = true;
    userIp_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauthToken_;
  bool prettyPrint_;
  string quotaUser_;
  string userIp_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauthToken_ : 1;
  bool _have_prettyPrint_ : 1;
  bool _have_quotaUser_ : 1;
  bool _have_userIp_ : 1;

  DISALLOW_COPY_AND_ASSIGN(CalendarServiceBaseRequest);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class AclResource_DeleteMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] ruleId ACL rule identifier.
   *
   */
  AclResource_DeleteMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& ruleId);

  /**
   * Standard destructor.
   */
  virtual ~AclResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string calendarId_;
  string ruleId_;
  DISALLOW_COPY_AND_ASSIGN(AclResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class AclResource_GetMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] ruleId ACL rule identifier.
   *
   */
  AclResource_GetMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& ruleId);

  /**
   * Standard destructor.
   */
  virtual ~AclResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AclRule* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string ruleId_;
  DISALLOW_COPY_AND_ASSIGN(AclResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class AclResource_InsertMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  AclResource_InsertMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::AclRule& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AclResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AclRule* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AclResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class AclResource_ListMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  AclResource_ListMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~AclResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Acl* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  DISALLOW_COPY_AND_ASSIGN(AclResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class AclResource_PatchMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] ruleId ACL rule identifier.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  AclResource_PatchMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& ruleId,
        const google_calendar_api::AclRule& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AclResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AclRule* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string ruleId_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AclResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class AclResource_UpdateMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] ruleId ACL rule identifier.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  AclResource_UpdateMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& ruleId,
        const google_calendar_api::AclRule& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AclResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AclRule* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string ruleId_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AclResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarListResource_DeleteMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  CalendarListResource_DeleteMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~CalendarListResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string calendarId_;
  DISALLOW_COPY_AND_ASSIGN(CalendarListResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class CalendarListResource_GetMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  CalendarListResource_GetMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~CalendarListResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CalendarListEntry* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  DISALLOW_COPY_AND_ASSIGN(CalendarListResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarListResource_InsertMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to insert.
   *
   */
  CalendarListResource_InsertMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const google_calendar_api::CalendarListEntry& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarListResource_InsertMethod();


    /**
     * Clears the '<code>colorRgbFormat</code>' attribute so it is no longer
     * set.
     */
    void clear_colorRgbFormat() {
      _have_colorRgbFormat_ = false;
      client::ClearCppValueHelper(&colorRgbFormat_);
    }

    /**
     * Gets the optional '<code>colorRgbFormat</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_colorRgbFormat() const { return colorRgbFormat_; }

    /**
     * Sets the '<code>colorRgbFormat</code>' attribute.
     *
     * @param[in] value Whether to use the 'foregroundColor' and
     * 'backgroundColor' fields to write the calendar colors (RGB). If this
     * feature is used, the index-based 'colorId' field will be set to the best
     * matching option automatically. Optional. The default is False.
     */
    void set_colorRgbFormat(bool value) {
      _have_colorRgbFormat_ = true;
      colorRgbFormat_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CalendarListEntry* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  bool colorRgbFormat_;
  bool _have_colorRgbFormat_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CalendarListResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class CalendarListResource_ListMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  CalendarListResource_ListMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarListResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_pageToken() {
      _have_pageToken_ = false;
      client::ClearCppValueHelper(&pageToken_);
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_pageToken() const { return pageToken_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_pageToken_ = true;
      return &pageToken_;
    }

    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Token specifying which result page to return. Optional.
     */
    void set_pageToken(const string& value) {
      _have_pageToken_ = true;
      pageToken_ = value;
    }


    /**
     * Clears the '<code>showHidden</code>' attribute so it is no longer set.
     */
    void clear_showHidden() {
      _have_showHidden_ = false;
      client::ClearCppValueHelper(&showHidden_);
    }

    /**
     * Gets the optional '<code>showHidden</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_showHidden() const { return showHidden_; }

    /**
     * Sets the '<code>showHidden</code>' attribute.
     *
     * @param[in] value Whether to show hidden entries. Optional. The default is
     * False.
     */
    void set_showHidden(bool value) {
      _have_showHidden_ = true;
      showHidden_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_maxResults() {
      _have_maxResults_ = false;
      client::ClearCppValueHelper(&maxResults_);
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxResults() const { return maxResults_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of entries returned on one result page.
     * Optional.
     */
    void set_maxResults(int32 value) {
      _have_maxResults_ = true;
      maxResults_ = value;
    }

    /**
     * Clears the '<code>minAccessRole</code>' attribute so it is no longer set.
     */
    void clear_minAccessRole() {
      _have_minAccessRole_ = false;
      client::ClearCppValueHelper(&minAccessRole_);
    }

    /**
     * Gets the optional '<code>minAccessRole</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_minAccessRole() const { return minAccessRole_; }

    /**
     * Gets a modifiable pointer to the optional <code>minAccessRole</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_minAccessRole() {
      _have_minAccessRole_ = true;
      return &minAccessRole_;
    }

    /**
     * Sets the '<code>minAccessRole</code>' attribute.
     *
     * @param[in] value The minimum access role for the user in the returned
     * entires. Optional. The default is no restriction.
     */
    void set_minAccessRole(const string& value) {
      _have_minAccessRole_ = true;
      minAccessRole_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CalendarList* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string pageToken_;
  bool showHidden_;
  int32 maxResults_;
  string minAccessRole_;
  bool _have_pageToken_ : 1;
  bool _have_showHidden_ : 1;
  bool _have_maxResults_ : 1;
  bool _have_minAccessRole_ : 1;
  DISALLOW_COPY_AND_ASSIGN(CalendarListResource_ListMethod);
};

typedef client::ServiceRequestPager<
            CalendarListResource_ListMethod,
            CalendarList>
        CalendarListResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarListResource_PatchMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  CalendarListResource_PatchMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::CalendarListEntry& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarListResource_PatchMethod();


    /**
     * Clears the '<code>colorRgbFormat</code>' attribute so it is no longer
     * set.
     */
    void clear_colorRgbFormat() {
      _have_colorRgbFormat_ = false;
      client::ClearCppValueHelper(&colorRgbFormat_);
    }

    /**
     * Gets the optional '<code>colorRgbFormat</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_colorRgbFormat() const { return colorRgbFormat_; }

    /**
     * Sets the '<code>colorRgbFormat</code>' attribute.
     *
     * @param[in] value Whether to use the 'foregroundColor' and
     * 'backgroundColor' fields to write the calendar colors (RGB). If this
     * feature is used, the index-based 'colorId' field will be set to the best
     * matching option automatically. Optional. The default is False.
     */
    void set_colorRgbFormat(bool value) {
      _have_colorRgbFormat_ = true;
      colorRgbFormat_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CalendarListEntry* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  bool colorRgbFormat_;
  bool _have_colorRgbFormat_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CalendarListResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarListResource_UpdateMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  CalendarListResource_UpdateMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::CalendarListEntry& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarListResource_UpdateMethod();


    /**
     * Clears the '<code>colorRgbFormat</code>' attribute so it is no longer
     * set.
     */
    void clear_colorRgbFormat() {
      _have_colorRgbFormat_ = false;
      client::ClearCppValueHelper(&colorRgbFormat_);
    }

    /**
     * Gets the optional '<code>colorRgbFormat</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_colorRgbFormat() const { return colorRgbFormat_; }

    /**
     * Sets the '<code>colorRgbFormat</code>' attribute.
     *
     * @param[in] value Whether to use the 'foregroundColor' and
     * 'backgroundColor' fields to write the calendar colors (RGB). If this
     * feature is used, the index-based 'colorId' field will be set to the best
     * matching option automatically. Optional. The default is False.
     */
    void set_colorRgbFormat(bool value) {
      _have_colorRgbFormat_ = true;
      colorRgbFormat_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CalendarListEntry* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  bool colorRgbFormat_;
  bool _have_colorRgbFormat_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CalendarListResource_UpdateMethod);
};


/**
 * Implements the clear method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarsResource_ClearMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  CalendarsResource_ClearMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~CalendarsResource_ClearMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string calendarId_;
  DISALLOW_COPY_AND_ASSIGN(CalendarsResource_ClearMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarsResource_DeleteMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  CalendarsResource_DeleteMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~CalendarsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string calendarId_;
  DISALLOW_COPY_AND_ASSIGN(CalendarsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class CalendarsResource_GetMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  CalendarsResource_GetMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~CalendarsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Calendar* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  DISALLOW_COPY_AND_ASSIGN(CalendarsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarsResource_InsertMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to insert.
   *
   */
  CalendarsResource_InsertMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const google_calendar_api::Calendar& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarsResource_InsertMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Calendar* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CalendarsResource_InsertMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarsResource_PatchMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  CalendarsResource_PatchMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::Calendar& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Calendar* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CalendarsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class CalendarsResource_UpdateMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  CalendarsResource_UpdateMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::Calendar& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CalendarsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Calendar* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CalendarsResource_UpdateMethod);
};


/**
 * Implements the stop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class ChannelsResource_StopMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to stop.
   *
   */
  ChannelsResource_StopMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const google_calendar_api::Channel& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ChannelsResource_StopMethod();

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChannelsResource_StopMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class ColorsResource_GetMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ColorsResource_GetMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ColorsResource_GetMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Colors* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:

  DISALLOW_COPY_AND_ASSIGN(ColorsResource_GetMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_DeleteMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] eventId Event identifier.
   *
   */
  EventsResource_DeleteMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& eventId);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_DeleteMethod();


    /**
     * Clears the '<code>sendNotifications</code>' attribute so it is no longer
     * set.
     */
    void clear_sendNotifications() {
      _have_sendNotifications_ = false;
      client::ClearCppValueHelper(&sendNotifications_);
    }

    /**
     * Gets the optional '<code>sendNotifications</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_sendNotifications() const { return sendNotifications_; }

    /**
     * Sets the '<code>sendNotifications</code>' attribute.
     *
     * @param[in] value Whether to send notifications about the deletion of the
     * event. Optional. The default is False.
     */
    void set_sendNotifications(bool value) {
      _have_sendNotifications_ = true;
      sendNotifications_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string calendarId_;
  string eventId_;
  bool sendNotifications_;
  bool _have_sendNotifications_ : 1;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class EventsResource_GetMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] eventId Event identifier.
   *
   */
  EventsResource_GetMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& eventId);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_GetMethod();


    /**
     * Clears the '<code>timeZone</code>' attribute so it is no longer set.
     */
    void clear_timeZone() {
      _have_timeZone_ = false;
      client::ClearCppValueHelper(&timeZone_);
    }

    /**
     * Gets the optional '<code>timeZone</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timeZone() const { return timeZone_; }

    /**
     * Gets a modifiable pointer to the optional <code>timeZone</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timeZone() {
      _have_timeZone_ = true;
      return &timeZone_;
    }

    /**
     * Sets the '<code>timeZone</code>' attribute.
     *
     * @param[in] value Time zone used in the response. Optional. The default is
     * the time zone of the calendar.
     */
    void set_timeZone(const string& value) {
      _have_timeZone_ = true;
      timeZone_ = value;
    }


    /**
     * Clears the '<code>alwaysIncludeEmail</code>' attribute so it is no longer
     * set.
     */
    void clear_alwaysIncludeEmail() {
      _have_alwaysIncludeEmail_ = false;
      client::ClearCppValueHelper(&alwaysIncludeEmail_);
    }

    /**
     * Gets the optional '<code>alwaysIncludeEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_alwaysIncludeEmail() const { return alwaysIncludeEmail_; }

    /**
     * Sets the '<code>alwaysIncludeEmail</code>' attribute.
     *
     * @param[in] value Whether to always include a value in the "email" field
     * for the organizer, creator and attendees, even if no real email is
     * available (i.e. a generated, non-working value will be provided). The use
     * of this option is discouraged and should only be used by clients which
     * cannot handle the absence of an email address value in the mentioned
     * places. Optional. The default is False.
     */
    void set_alwaysIncludeEmail(bool value) {
      _have_alwaysIncludeEmail_ = true;
      alwaysIncludeEmail_ = value;
    }

    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string eventId_;
  string timeZone_;
  bool alwaysIncludeEmail_;
  int32 maxAttendees_;
  bool _have_timeZone_ : 1;
  bool _have_alwaysIncludeEmail_ : 1;
  bool _have_maxAttendees_ : 1;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_GetMethod);
};

/**
 * Implements the import method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_ImportMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to import.
   *
   */
  EventsResource_ImportMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::Event& _content_);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_ImportMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_ImportMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_InsertMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  EventsResource_InsertMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::Event& _content_);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_InsertMethod();


    /**
     * Clears the '<code>sendNotifications</code>' attribute so it is no longer
     * set.
     */
    void clear_sendNotifications() {
      _have_sendNotifications_ = false;
      client::ClearCppValueHelper(&sendNotifications_);
    }

    /**
     * Gets the optional '<code>sendNotifications</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_sendNotifications() const { return sendNotifications_; }

    /**
     * Sets the '<code>sendNotifications</code>' attribute.
     *
     * @param[in] value Whether to send notifications about the creation of the
     * new event. Optional. The default is False.
     */
    void set_sendNotifications(bool value) {
      _have_sendNotifications_ = true;
      sendNotifications_ = value;
    }

    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  bool sendNotifications_;
  int32 maxAttendees_;
  bool _have_sendNotifications_ : 1;
  bool _have_maxAttendees_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_InsertMethod);
};

/**
 * Implements the instances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class EventsResource_InstancesMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] eventId Recurring event identifier.
   *
   */
  EventsResource_InstancesMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& eventId);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_InstancesMethod();


    /**
     * Clears the '<code>showDeleted</code>' attribute so it is no longer set.
     */
    void clear_showDeleted() {
      _have_showDeleted_ = false;
      client::ClearCppValueHelper(&showDeleted_);
    }

    /**
     * Gets the optional '<code>showDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_showDeleted() const { return showDeleted_; }

    /**
     * Sets the '<code>showDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted events (with 'status' equals
     * 'cancelled') in the result. Cancelled instances of recurring events will
     * still be included if 'singleEvents' is False. Optional. The default is
     * False.
     */
    void set_showDeleted(bool value) {
      _have_showDeleted_ = true;
      showDeleted_ = value;
    }

    /**
     * Clears the '<code>timeMax</code>' attribute so it is no longer set.
     */
    void clear_timeMax() {
      _have_timeMax_ = false;
      client::ClearCppValueHelper(&timeMax_);
    }

    /**
     * Gets the optional '<code>timeMax</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_timeMax() const { return timeMax_; }

    /**
     * Sets the '<code>timeMax</code>' attribute.
     *
     * @param[in] value Upper bound (exclusive) for an event's start time to
     * filter by. Optional. The default is not to filter by start time.
     */
    void set_timeMax(client::DateTime value) {
      _have_timeMax_ = true;
      timeMax_ = value;
    }

    /**
     * Clears the '<code>alwaysIncludeEmail</code>' attribute so it is no longer
     * set.
     */
    void clear_alwaysIncludeEmail() {
      _have_alwaysIncludeEmail_ = false;
      client::ClearCppValueHelper(&alwaysIncludeEmail_);
    }

    /**
     * Gets the optional '<code>alwaysIncludeEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_alwaysIncludeEmail() const { return alwaysIncludeEmail_; }

    /**
     * Sets the '<code>alwaysIncludeEmail</code>' attribute.
     *
     * @param[in] value Whether to always include a value in the "email" field
     * for the organizer, creator and attendees, even if no real email is
     * available (i.e. a generated, non-working value will be provided). The use
     * of this option is discouraged and should only be used by clients which
     * cannot handle the absence of an email address value in the mentioned
     * places. Optional. The default is False.
     */
    void set_alwaysIncludeEmail(bool value) {
      _have_alwaysIncludeEmail_ = true;
      alwaysIncludeEmail_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_maxResults() {
      _have_maxResults_ = false;
      client::ClearCppValueHelper(&maxResults_);
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxResults() const { return maxResults_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of events returned on one result page.
     * Optional.
     */
    void set_maxResults(int32 value) {
      _have_maxResults_ = true;
      maxResults_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_pageToken() {
      _have_pageToken_ = false;
      client::ClearCppValueHelper(&pageToken_);
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_pageToken() const { return pageToken_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_pageToken_ = true;
      return &pageToken_;
    }

    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Token specifying which result page to return. Optional.
     */
    void set_pageToken(const string& value) {
      _have_pageToken_ = true;
      pageToken_ = value;
    }


    /**
     * Clears the '<code>timeMin</code>' attribute so it is no longer set.
     */
    void clear_timeMin() {
      _have_timeMin_ = false;
      client::ClearCppValueHelper(&timeMin_);
    }

    /**
     * Gets the optional '<code>timeMin</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_timeMin() const { return timeMin_; }

    /**
     * Sets the '<code>timeMin</code>' attribute.
     *
     * @param[in] value Lower bound (inclusive) for an event's end time to
     * filter by. Optional. The default is not to filter by end time.
     */
    void set_timeMin(client::DateTime value) {
      _have_timeMin_ = true;
      timeMin_ = value;
    }

    /**
     * Clears the '<code>timeZone</code>' attribute so it is no longer set.
     */
    void clear_timeZone() {
      _have_timeZone_ = false;
      client::ClearCppValueHelper(&timeZone_);
    }

    /**
     * Gets the optional '<code>timeZone</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timeZone() const { return timeZone_; }

    /**
     * Gets a modifiable pointer to the optional <code>timeZone</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timeZone() {
      _have_timeZone_ = true;
      return &timeZone_;
    }

    /**
     * Sets the '<code>timeZone</code>' attribute.
     *
     * @param[in] value Time zone used in the response. Optional. The default is
     * the time zone of the calendar.
     */
    void set_timeZone(const string& value) {
      _have_timeZone_ = true;
      timeZone_ = value;
    }


    /**
     * Clears the '<code>originalStart</code>' attribute so it is no longer set.
     */
    void clear_originalStart() {
      _have_originalStart_ = false;
      client::ClearCppValueHelper(&originalStart_);
    }

    /**
     * Gets the optional '<code>originalStart</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_originalStart() const { return originalStart_; }

    /**
     * Gets a modifiable pointer to the optional <code>originalStart</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_originalStart() {
      _have_originalStart_ = true;
      return &originalStart_;
    }

    /**
     * Sets the '<code>originalStart</code>' attribute.
     *
     * @param[in] value The original start time of the instance in the result.
     * Optional.
     */
    void set_originalStart(const string& value) {
      _have_originalStart_ = true;
      originalStart_ = value;
    }


    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Events* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string eventId_;
  bool showDeleted_;
  client::DateTime timeMax_;
  bool alwaysIncludeEmail_;
  int32 maxResults_;
  string pageToken_;
  client::DateTime timeMin_;
  string timeZone_;
  string originalStart_;
  int32 maxAttendees_;
  bool _have_showDeleted_ : 1;
  bool _have_timeMax_ : 1;
  bool _have_alwaysIncludeEmail_ : 1;
  bool _have_maxResults_ : 1;
  bool _have_pageToken_ : 1;
  bool _have_timeMin_ : 1;
  bool _have_timeZone_ : 1;
  bool _have_originalStart_ : 1;
  bool _have_maxAttendees_ : 1;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_InstancesMethod);
};

typedef client::ServiceRequestPager<
            EventsResource_InstancesMethod,
            Events>
        EventsResource_InstancesMethodPager;

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class EventsResource_ListMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   */
  EventsResource_ListMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_ListMethod();


    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_orderBy() {
      _have_orderBy_ = false;
      client::ClearCppValueHelper(&orderBy_);
    }

    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_orderBy() const { return orderBy_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_orderBy_ = true;
      return &orderBy_;
    }

    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value The order of the events returned in the result.
     * Optional. The default is an unspecified, stable order.
     */
    void set_orderBy(const string& value) {
      _have_orderBy_ = true;
      orderBy_ = value;
    }


    /**
     * Clears the '<code>showHiddenInvitations</code>' attribute so it is no
     * longer set.
     */
    void clear_showHiddenInvitations() {
      _have_showHiddenInvitations_ = false;
      client::ClearCppValueHelper(&showHiddenInvitations_);
    }

    /**
     * Gets the optional '<code>showHiddenInvitations</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_showHiddenInvitations() const { return showHiddenInvitations_; }

    /**
     * Sets the '<code>showHiddenInvitations</code>' attribute.
     *
     * @param[in] value Whether to include hidden invitations in the result.
     * Optional. The default is False.
     */
    void set_showHiddenInvitations(bool value) {
      _have_showHiddenInvitations_ = true;
      showHiddenInvitations_ = value;
    }

    /**
     * Clears the '<code>showDeleted</code>' attribute so it is no longer set.
     */
    void clear_showDeleted() {
      _have_showDeleted_ = false;
      client::ClearCppValueHelper(&showDeleted_);
    }

    /**
     * Gets the optional '<code>showDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_showDeleted() const { return showDeleted_; }

    /**
     * Sets the '<code>showDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted events (with 'status' equals
     * 'cancelled') in the result. Cancelled instances of recurring events (but
     * not the underlying recurring event) will still be included if
     * 'showDeleted' and 'singleEvents' are both False. If 'showDeleted' and
     * 'singleEvents' are both True, only single instances of deleted events
     * (but not the underlying recurring events) are returned. Optional. The
     * default is False.
     */
    void set_showDeleted(bool value) {
      _have_showDeleted_ = true;
      showDeleted_ = value;
    }

    /**
     * Clears the '<code>iCalUID</code>' attribute so it is no longer set.
     */
    void clear_iCalUID() {
      _have_iCalUID_ = false;
      client::ClearCppValueHelper(&iCalUID_);
    }

    /**
     * Gets the optional '<code>iCalUID</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_iCalUID() const { return iCalUID_; }

    /**
     * Gets a modifiable pointer to the optional <code>iCalUID</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_iCalUID() {
      _have_iCalUID_ = true;
      return &iCalUID_;
    }

    /**
     * Sets the '<code>iCalUID</code>' attribute.
     *
     * @param[in] value Specifies iCalendar UID (iCalUID) of events to be
     * included in the response. Optional.
     */
    void set_iCalUID(const string& value) {
      _have_iCalUID_ = true;
      iCalUID_ = value;
    }


    /**
     * Clears the '<code>updatedMin</code>' attribute so it is no longer set.
     */
    void clear_updatedMin() {
      _have_updatedMin_ = false;
      client::ClearCppValueHelper(&updatedMin_);
    }

    /**
     * Gets the optional '<code>updatedMin</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_updatedMin() const { return updatedMin_; }

    /**
     * Sets the '<code>updatedMin</code>' attribute.
     *
     * @param[in] value Lower bound for an event's last modification time (as a
     * RFC 3339 timestamp) to filter by. Optional. The default is not to filter
     * by last modification time.
     */
    void set_updatedMin(client::DateTime value) {
      _have_updatedMin_ = true;
      updatedMin_ = value;
    }

    /**
     * Clears the '<code>singleEvents</code>' attribute so it is no longer set.
     */
    void clear_singleEvents() {
      _have_singleEvents_ = false;
      client::ClearCppValueHelper(&singleEvents_);
    }

    /**
     * Gets the optional '<code>singleEvents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_singleEvents() const { return singleEvents_; }

    /**
     * Sets the '<code>singleEvents</code>' attribute.
     *
     * @param[in] value Whether to expand recurring events into instances and
     * only return single one-off events and instances of recurring events, but
     * not the underlying recurring events themselves. Optional. The default is
     * False.
     */
    void set_singleEvents(bool value) {
      _have_singleEvents_ = true;
      singleEvents_ = value;
    }

    /**
     * Clears the '<code>alwaysIncludeEmail</code>' attribute so it is no longer
     * set.
     */
    void clear_alwaysIncludeEmail() {
      _have_alwaysIncludeEmail_ = false;
      client::ClearCppValueHelper(&alwaysIncludeEmail_);
    }

    /**
     * Gets the optional '<code>alwaysIncludeEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_alwaysIncludeEmail() const { return alwaysIncludeEmail_; }

    /**
     * Sets the '<code>alwaysIncludeEmail</code>' attribute.
     *
     * @param[in] value Whether to always include a value in the "email" field
     * for the organizer, creator and attendees, even if no real email is
     * available (i.e. a generated, non-working value will be provided). The use
     * of this option is discouraged and should only be used by clients which
     * cannot handle the absence of an email address value in the mentioned
     * places. Optional. The default is False.
     */
    void set_alwaysIncludeEmail(bool value) {
      _have_alwaysIncludeEmail_ = true;
      alwaysIncludeEmail_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_maxResults() {
      _have_maxResults_ = false;
      client::ClearCppValueHelper(&maxResults_);
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxResults() const { return maxResults_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of events returned on one result page.
     * Optional.
     */
    void set_maxResults(int32 value) {
      _have_maxResults_ = true;
      maxResults_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }

    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }

    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Free text search terms to find events that match these
     * terms in any field, except for extended properties. Optional.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_pageToken() {
      _have_pageToken_ = false;
      client::ClearCppValueHelper(&pageToken_);
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_pageToken() const { return pageToken_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_pageToken_ = true;
      return &pageToken_;
    }

    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Token specifying which result page to return. Optional.
     */
    void set_pageToken(const string& value) {
      _have_pageToken_ = true;
      pageToken_ = value;
    }


    /**
     * Clears the '<code>timeMin</code>' attribute so it is no longer set.
     */
    void clear_timeMin() {
      _have_timeMin_ = false;
      client::ClearCppValueHelper(&timeMin_);
    }

    /**
     * Gets the optional '<code>timeMin</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_timeMin() const { return timeMin_; }

    /**
     * Sets the '<code>timeMin</code>' attribute.
     *
     * @param[in] value Lower bound (inclusive) for an event's end time to
     * filter by. Optional. The default is not to filter by end time.
     */
    void set_timeMin(client::DateTime value) {
      _have_timeMin_ = true;
      timeMin_ = value;
    }

    /**
     * Clears the '<code>timeZone</code>' attribute so it is no longer set.
     */
    void clear_timeZone() {
      _have_timeZone_ = false;
      client::ClearCppValueHelper(&timeZone_);
    }

    /**
     * Gets the optional '<code>timeZone</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timeZone() const { return timeZone_; }

    /**
     * Gets a modifiable pointer to the optional <code>timeZone</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timeZone() {
      _have_timeZone_ = true;
      return &timeZone_;
    }

    /**
     * Sets the '<code>timeZone</code>' attribute.
     *
     * @param[in] value Time zone used in the response. Optional. The default is
     * the time zone of the calendar.
     */
    void set_timeZone(const string& value) {
      _have_timeZone_ = true;
      timeZone_ = value;
    }


    /**
     * Clears the '<code>timeMax</code>' attribute so it is no longer set.
     */
    void clear_timeMax() {
      _have_timeMax_ = false;
      client::ClearCppValueHelper(&timeMax_);
    }

    /**
     * Gets the optional '<code>timeMax</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_timeMax() const { return timeMax_; }

    /**
     * Sets the '<code>timeMax</code>' attribute.
     *
     * @param[in] value Upper bound (exclusive) for an event's start time to
     * filter by. Optional. The default is not to filter by start time.
     */
    void set_timeMax(client::DateTime value) {
      _have_timeMax_ = true;
      timeMax_ = value;
    }

    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Events* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string orderBy_;
  bool showHiddenInvitations_;
  bool showDeleted_;
  string iCalUID_;
  client::DateTime updatedMin_;
  bool singleEvents_;
  bool alwaysIncludeEmail_;
  int32 maxResults_;
  string q_;
  string pageToken_;
  client::DateTime timeMin_;
  string timeZone_;
  client::DateTime timeMax_;
  int32 maxAttendees_;
  bool _have_orderBy_ : 1;
  bool _have_showHiddenInvitations_ : 1;
  bool _have_showDeleted_ : 1;
  bool _have_iCalUID_ : 1;
  bool _have_updatedMin_ : 1;
  bool _have_singleEvents_ : 1;
  bool _have_alwaysIncludeEmail_ : 1;
  bool _have_maxResults_ : 1;
  bool _have_q_ : 1;
  bool _have_pageToken_ : 1;
  bool _have_timeMin_ : 1;
  bool _have_timeZone_ : 1;
  bool _have_timeMax_ : 1;
  bool _have_maxAttendees_ : 1;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            EventsResource_ListMethod,
            Events>
        EventsResource_ListMethodPager;

/**
 * Implements the move method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_MoveMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier of the source calendar where the
   * event currently is on.
   *
   * @param[in] eventId Event identifier.
   *
   * @param[in] destination Calendar identifier of the target calendar where the
   * event is to be moved to.
   *
   */
  EventsResource_MoveMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& eventId,
        const StringPiece& destination);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_MoveMethod();


    /**
     * Clears the '<code>sendNotifications</code>' attribute so it is no longer
     * set.
     */
    void clear_sendNotifications() {
      _have_sendNotifications_ = false;
      client::ClearCppValueHelper(&sendNotifications_);
    }

    /**
     * Gets the optional '<code>sendNotifications</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_sendNotifications() const { return sendNotifications_; }

    /**
     * Sets the '<code>sendNotifications</code>' attribute.
     *
     * @param[in] value Whether to send notifications about the change of the
     * event's organizer. Optional. The default is False.
     */
    void set_sendNotifications(bool value) {
      _have_sendNotifications_ = true;
      sendNotifications_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string eventId_;
  string destination_;
  bool sendNotifications_;
  bool _have_sendNotifications_ : 1;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_MoveMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_PatchMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] eventId Event identifier.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  EventsResource_PatchMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& eventId,
        const google_calendar_api::Event& _content_);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_PatchMethod();


    /**
     * Clears the '<code>sendNotifications</code>' attribute so it is no longer
     * set.
     */
    void clear_sendNotifications() {
      _have_sendNotifications_ = false;
      client::ClearCppValueHelper(&sendNotifications_);
    }

    /**
     * Gets the optional '<code>sendNotifications</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_sendNotifications() const { return sendNotifications_; }

    /**
     * Sets the '<code>sendNotifications</code>' attribute.
     *
     * @param[in] value Whether to send notifications about the event update
     * (e.g. attendee's responses, title changes, etc.). Optional. The default
     * is False.
     */
    void set_sendNotifications(bool value) {
      _have_sendNotifications_ = true;
      sendNotifications_ = value;
    }

    /**
     * Clears the '<code>alwaysIncludeEmail</code>' attribute so it is no longer
     * set.
     */
    void clear_alwaysIncludeEmail() {
      _have_alwaysIncludeEmail_ = false;
      client::ClearCppValueHelper(&alwaysIncludeEmail_);
    }

    /**
     * Gets the optional '<code>alwaysIncludeEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_alwaysIncludeEmail() const { return alwaysIncludeEmail_; }

    /**
     * Sets the '<code>alwaysIncludeEmail</code>' attribute.
     *
     * @param[in] value Whether to always include a value in the "email" field
     * for the organizer, creator and attendees, even if no real email is
     * available (i.e. a generated, non-working value will be provided). The use
     * of this option is discouraged and should only be used by clients which
     * cannot handle the absence of an email address value in the mentioned
     * places. Optional. The default is False.
     */
    void set_alwaysIncludeEmail(bool value) {
      _have_alwaysIncludeEmail_ = true;
      alwaysIncludeEmail_ = value;
    }

    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string eventId_;
  bool sendNotifications_;
  bool alwaysIncludeEmail_;
  int32 maxAttendees_;
  bool _have_sendNotifications_ : 1;
  bool _have_alwaysIncludeEmail_ : 1;
  bool _have_maxAttendees_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_PatchMethod);
};

/**
 * Implements the quickAdd method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_QuickAddMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] text The text describing the event to be created.
   *
   */
  EventsResource_QuickAddMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& text);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_QuickAddMethod();


    /**
     * Clears the '<code>sendNotifications</code>' attribute so it is no longer
     * set.
     */
    void clear_sendNotifications() {
      _have_sendNotifications_ = false;
      client::ClearCppValueHelper(&sendNotifications_);
    }

    /**
     * Gets the optional '<code>sendNotifications</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_sendNotifications() const { return sendNotifications_; }

    /**
     * Sets the '<code>sendNotifications</code>' attribute.
     *
     * @param[in] value Whether to send notifications about the creation of the
     * event. Optional. The default is False.
     */
    void set_sendNotifications(bool value) {
      _have_sendNotifications_ = true;
      sendNotifications_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string text_;
  bool sendNotifications_;
  bool _have_sendNotifications_ : 1;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_QuickAddMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar"
 *
 */
class EventsResource_UpdateMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] eventId Event identifier.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  EventsResource_UpdateMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const StringPiece& eventId,
        const google_calendar_api::Event& _content_);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_UpdateMethod();


    /**
     * Clears the '<code>sendNotifications</code>' attribute so it is no longer
     * set.
     */
    void clear_sendNotifications() {
      _have_sendNotifications_ = false;
      client::ClearCppValueHelper(&sendNotifications_);
    }

    /**
     * Gets the optional '<code>sendNotifications</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_sendNotifications() const { return sendNotifications_; }

    /**
     * Sets the '<code>sendNotifications</code>' attribute.
     *
     * @param[in] value Whether to send notifications about the event update
     * (e.g. attendee's responses, title changes, etc.). Optional. The default
     * is False.
     */
    void set_sendNotifications(bool value) {
      _have_sendNotifications_ = true;
      sendNotifications_ = value;
    }

    /**
     * Clears the '<code>alwaysIncludeEmail</code>' attribute so it is no longer
     * set.
     */
    void clear_alwaysIncludeEmail() {
      _have_alwaysIncludeEmail_ = false;
      client::ClearCppValueHelper(&alwaysIncludeEmail_);
    }

    /**
     * Gets the optional '<code>alwaysIncludeEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_alwaysIncludeEmail() const { return alwaysIncludeEmail_; }

    /**
     * Sets the '<code>alwaysIncludeEmail</code>' attribute.
     *
     * @param[in] value Whether to always include a value in the "email" field
     * for the organizer, creator and attendees, even if no real email is
     * available (i.e. a generated, non-working value will be provided). The use
     * of this option is discouraged and should only be used by clients which
     * cannot handle the absence of an email address value in the mentioned
     * places. Optional. The default is False.
     */
    void set_alwaysIncludeEmail(bool value) {
      _have_alwaysIncludeEmail_ = true;
      alwaysIncludeEmail_ = value;
    }

    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Event* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string eventId_;
  bool sendNotifications_;
  bool alwaysIncludeEmail_;
  int32 maxAttendees_;
  bool _have_sendNotifications_ : 1;
  bool _have_alwaysIncludeEmail_ : 1;
  bool _have_maxAttendees_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_UpdateMethod);
};

/**
 * Implements the watch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class EventsResource_WatchMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] calendarId Calendar identifier.
   *
   * @param[in] _content_ The data object to watch.
   *
   */
  EventsResource_WatchMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& calendarId,
        const google_calendar_api::Channel& _content_);

  /**
   * Standard destructor.
   */
  virtual ~EventsResource_WatchMethod();


    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_orderBy() {
      _have_orderBy_ = false;
      client::ClearCppValueHelper(&orderBy_);
    }

    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_orderBy() const { return orderBy_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_orderBy_ = true;
      return &orderBy_;
    }

    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value The order of the events returned in the result.
     * Optional. The default is an unspecified, stable order.
     */
    void set_orderBy(const string& value) {
      _have_orderBy_ = true;
      orderBy_ = value;
    }


    /**
     * Clears the '<code>showHiddenInvitations</code>' attribute so it is no
     * longer set.
     */
    void clear_showHiddenInvitations() {
      _have_showHiddenInvitations_ = false;
      client::ClearCppValueHelper(&showHiddenInvitations_);
    }

    /**
     * Gets the optional '<code>showHiddenInvitations</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_showHiddenInvitations() const { return showHiddenInvitations_; }

    /**
     * Sets the '<code>showHiddenInvitations</code>' attribute.
     *
     * @param[in] value Whether to include hidden invitations in the result.
     * Optional. The default is False.
     */
    void set_showHiddenInvitations(bool value) {
      _have_showHiddenInvitations_ = true;
      showHiddenInvitations_ = value;
    }

    /**
     * Clears the '<code>showDeleted</code>' attribute so it is no longer set.
     */
    void clear_showDeleted() {
      _have_showDeleted_ = false;
      client::ClearCppValueHelper(&showDeleted_);
    }

    /**
     * Gets the optional '<code>showDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_showDeleted() const { return showDeleted_; }

    /**
     * Sets the '<code>showDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted events (with 'status' equals
     * 'cancelled') in the result. Cancelled instances of recurring events (but
     * not the underlying recurring event) will still be included if
     * 'showDeleted' and 'singleEvents' are both False. If 'showDeleted' and
     * 'singleEvents' are both True, only single instances of deleted events
     * (but not the underlying recurring events) are returned. Optional. The
     * default is False.
     */
    void set_showDeleted(bool value) {
      _have_showDeleted_ = true;
      showDeleted_ = value;
    }

    /**
     * Clears the '<code>iCalUID</code>' attribute so it is no longer set.
     */
    void clear_iCalUID() {
      _have_iCalUID_ = false;
      client::ClearCppValueHelper(&iCalUID_);
    }

    /**
     * Gets the optional '<code>iCalUID</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_iCalUID() const { return iCalUID_; }

    /**
     * Gets a modifiable pointer to the optional <code>iCalUID</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_iCalUID() {
      _have_iCalUID_ = true;
      return &iCalUID_;
    }

    /**
     * Sets the '<code>iCalUID</code>' attribute.
     *
     * @param[in] value Specifies iCalendar UID (iCalUID) of events to be
     * included in the response. Optional.
     */
    void set_iCalUID(const string& value) {
      _have_iCalUID_ = true;
      iCalUID_ = value;
    }


    /**
     * Clears the '<code>updatedMin</code>' attribute so it is no longer set.
     */
    void clear_updatedMin() {
      _have_updatedMin_ = false;
      client::ClearCppValueHelper(&updatedMin_);
    }

    /**
     * Gets the optional '<code>updatedMin</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_updatedMin() const { return updatedMin_; }

    /**
     * Sets the '<code>updatedMin</code>' attribute.
     *
     * @param[in] value Lower bound for an event's last modification time (as a
     * RFC 3339 timestamp) to filter by. Optional. The default is not to filter
     * by last modification time.
     */
    void set_updatedMin(client::DateTime value) {
      _have_updatedMin_ = true;
      updatedMin_ = value;
    }

    /**
     * Clears the '<code>singleEvents</code>' attribute so it is no longer set.
     */
    void clear_singleEvents() {
      _have_singleEvents_ = false;
      client::ClearCppValueHelper(&singleEvents_);
    }

    /**
     * Gets the optional '<code>singleEvents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_singleEvents() const { return singleEvents_; }

    /**
     * Sets the '<code>singleEvents</code>' attribute.
     *
     * @param[in] value Whether to expand recurring events into instances and
     * only return single one-off events and instances of recurring events, but
     * not the underlying recurring events themselves. Optional. The default is
     * False.
     */
    void set_singleEvents(bool value) {
      _have_singleEvents_ = true;
      singleEvents_ = value;
    }

    /**
     * Clears the '<code>alwaysIncludeEmail</code>' attribute so it is no longer
     * set.
     */
    void clear_alwaysIncludeEmail() {
      _have_alwaysIncludeEmail_ = false;
      client::ClearCppValueHelper(&alwaysIncludeEmail_);
    }

    /**
     * Gets the optional '<code>alwaysIncludeEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_alwaysIncludeEmail() const { return alwaysIncludeEmail_; }

    /**
     * Sets the '<code>alwaysIncludeEmail</code>' attribute.
     *
     * @param[in] value Whether to always include a value in the "email" field
     * for the organizer, creator and attendees, even if no real email is
     * available (i.e. a generated, non-working value will be provided). The use
     * of this option is discouraged and should only be used by clients which
     * cannot handle the absence of an email address value in the mentioned
     * places. Optional. The default is False.
     */
    void set_alwaysIncludeEmail(bool value) {
      _have_alwaysIncludeEmail_ = true;
      alwaysIncludeEmail_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_maxResults() {
      _have_maxResults_ = false;
      client::ClearCppValueHelper(&maxResults_);
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxResults() const { return maxResults_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of events returned on one result page.
     * Optional.
     */
    void set_maxResults(int32 value) {
      _have_maxResults_ = true;
      maxResults_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }

    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }

    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Free text search terms to find events that match these
     * terms in any field, except for extended properties. Optional.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_pageToken() {
      _have_pageToken_ = false;
      client::ClearCppValueHelper(&pageToken_);
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_pageToken() const { return pageToken_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_pageToken_ = true;
      return &pageToken_;
    }

    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Token specifying which result page to return. Optional.
     */
    void set_pageToken(const string& value) {
      _have_pageToken_ = true;
      pageToken_ = value;
    }


    /**
     * Clears the '<code>timeMin</code>' attribute so it is no longer set.
     */
    void clear_timeMin() {
      _have_timeMin_ = false;
      client::ClearCppValueHelper(&timeMin_);
    }

    /**
     * Gets the optional '<code>timeMin</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_timeMin() const { return timeMin_; }

    /**
     * Sets the '<code>timeMin</code>' attribute.
     *
     * @param[in] value Lower bound (inclusive) for an event's end time to
     * filter by. Optional. The default is not to filter by end time.
     */
    void set_timeMin(client::DateTime value) {
      _have_timeMin_ = true;
      timeMin_ = value;
    }

    /**
     * Clears the '<code>timeZone</code>' attribute so it is no longer set.
     */
    void clear_timeZone() {
      _have_timeZone_ = false;
      client::ClearCppValueHelper(&timeZone_);
    }

    /**
     * Gets the optional '<code>timeZone</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timeZone() const { return timeZone_; }

    /**
     * Gets a modifiable pointer to the optional <code>timeZone</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timeZone() {
      _have_timeZone_ = true;
      return &timeZone_;
    }

    /**
     * Sets the '<code>timeZone</code>' attribute.
     *
     * @param[in] value Time zone used in the response. Optional. The default is
     * the time zone of the calendar.
     */
    void set_timeZone(const string& value) {
      _have_timeZone_ = true;
      timeZone_ = value;
    }


    /**
     * Clears the '<code>timeMax</code>' attribute so it is no longer set.
     */
    void clear_timeMax() {
      _have_timeMax_ = false;
      client::ClearCppValueHelper(&timeMax_);
    }

    /**
     * Gets the optional '<code>timeMax</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_timeMax() const { return timeMax_; }

    /**
     * Sets the '<code>timeMax</code>' attribute.
     *
     * @param[in] value Upper bound (exclusive) for an event's start time to
     * filter by. Optional. The default is not to filter by start time.
     */
    void set_timeMax(client::DateTime value) {
      _have_timeMax_ = true;
      timeMax_ = value;
    }

    /**
     * Clears the '<code>maxAttendees</code>' attribute so it is no longer set.
     */
    void clear_maxAttendees() {
      _have_maxAttendees_ = false;
      client::ClearCppValueHelper(&maxAttendees_);
    }

    /**
     * Gets the optional '<code>maxAttendees</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_maxAttendees() const { return maxAttendees_; }

    /**
     * Sets the '<code>maxAttendees</code>' attribute.
     *
     * @param[in] value The maximum number of attendees to include in the
     * response. If there are more than the specified number of attendees, only
     * the participant is returned. Optional.
     */
    void set_maxAttendees(int32 value) {
      _have_maxAttendees_ = true;
      maxAttendees_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Channel* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string calendarId_;
  string orderBy_;
  bool showHiddenInvitations_;
  bool showDeleted_;
  string iCalUID_;
  client::DateTime updatedMin_;
  bool singleEvents_;
  bool alwaysIncludeEmail_;
  int32 maxResults_;
  string q_;
  string pageToken_;
  client::DateTime timeMin_;
  string timeZone_;
  client::DateTime timeMax_;
  int32 maxAttendees_;
  bool _have_orderBy_ : 1;
  bool _have_showHiddenInvitations_ : 1;
  bool _have_showDeleted_ : 1;
  bool _have_iCalUID_ : 1;
  bool _have_updatedMin_ : 1;
  bool _have_singleEvents_ : 1;
  bool _have_alwaysIncludeEmail_ : 1;
  bool _have_maxResults_ : 1;
  bool _have_q_ : 1;
  bool _have_pageToken_ : 1;
  bool _have_timeMin_ : 1;
  bool _have_timeZone_ : 1;
  bool _have_timeMax_ : 1;
  bool _have_maxAttendees_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(EventsResource_WatchMethod);
};


/**
 * Implements the query method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class FreebusyResource_QueryMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to query.
   *
   */
  FreebusyResource_QueryMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const google_calendar_api::FreeBusyRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~FreebusyResource_QueryMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      FreeBusyResponse* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FreebusyResource_QueryMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class SettingsResource_GetMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] setting Name of the user setting.
   *
   */
  SettingsResource_GetMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& setting);

  /**
   * Standard destructor.
   */
  virtual ~SettingsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Setting* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string setting_;
  DISALLOW_COPY_AND_ASSIGN(SettingsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * The required authorization scopes for this method are:
 * "https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cal
 * endar.readonly"
 *
 */
class SettingsResource_ListMethod : public CalendarServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  SettingsResource_ListMethod(
        const CalendarService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~SettingsResource_ListMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Settings* data) {
    return CalendarServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:

  DISALLOW_COPY_AND_ASSIGN(SettingsResource_ListMethod);
};



/**
 * Service definition for CalendarService (v3).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/google-apps/calendar/firstapp'>'https://developers.google.com/google-apps/calendar/firstapp</a>
 */
class CalendarService : public client::ClientService {
 public:
   /**
    * The name of the API that this was generated from.
    */
   static const StringPiece googleapis_API_NAME;

   /**
    * The version of the API that this interface was generated from.
    */
   static const StringPiece googleapis_API_VERSION;

   /**
    * The code generator used to generate this API.
    */
   static const StringPiece googleapis_API_GENERATOR;


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class AclResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      AclResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~AclResource();

      /**
       * Creates a new AclResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] ruleId ACL rule identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AclResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& ruleId) const;

      /**
       * Creates a new AclResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] ruleId ACL rule identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AclResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& ruleId) const;

      /**
       * Creates a new AclResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AclResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::AclRule& _content_) const;

      /**
       * Creates a new AclResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AclResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new AclResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] ruleId ACL rule identifier.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AclResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& ruleId,
          const google_calendar_api::AclRule& _content_) const;

      /**
       * Creates a new AclResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] ruleId ACL rule identifier.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AclResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& ruleId,
          const google_calendar_api::AclRule& _content_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(AclResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class CalendarListResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      CalendarListResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~CalendarListResource();

      /**
       * Creates a new CalendarListResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarListResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new CalendarListResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarListResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new CalendarListResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarListResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const google_calendar_api::CalendarListEntry& _content_) const;

      /**
       * Creates a new CalendarListResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarListResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      CalendarListResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a new CalendarListResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarListResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::CalendarListEntry& _content_) const;

      /**
       * Creates a new CalendarListResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarListResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::CalendarListEntry& _content_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(CalendarListResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class CalendarsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      CalendarsResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~CalendarsResource();

      /**
       * Creates a new CalendarsResource_ClearMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarsResource_ClearMethod* NewClearMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new CalendarsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new CalendarsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new CalendarsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const google_calendar_api::Calendar& _content_) const;

      /**
       * Creates a new CalendarsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::Calendar& _content_) const;

      /**
       * Creates a new CalendarsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CalendarsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::Calendar& _content_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(CalendarsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChannelsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChannelsResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~ChannelsResource();

      /**
       * Creates a new ChannelsResource_StopMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _content_ The data object to stop.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelsResource_StopMethod* NewStopMethod(
          client::AuthorizationCredential* _credential_,
          const google_calendar_api::Channel& _content_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(ChannelsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ColorsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ColorsResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~ColorsResource();

      /**
       * Creates a new ColorsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ColorsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(ColorsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class EventsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      EventsResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~EventsResource();

      /**
       * Creates a new EventsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] eventId Event identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId) const;

      /**
       * Creates a new EventsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] eventId Event identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId) const;

      /**
       * Creates a new EventsResource_ImportMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to import.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_ImportMethod* NewImportMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::Event& _content_) const;

      /**
       * Creates a new EventsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::Event& _content_) const;

      /**
       * Creates a new EventsResource_InstancesMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] eventId Recurring event identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_InstancesMethod* NewInstancesMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] calendarId Calendar identifier.
       *
       * @param[in] eventId Recurring event identifier.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      EventsResource_InstancesMethodPager* NewInstancesMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId) const;

      /**
       * Creates a new EventsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] calendarId Calendar identifier.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      EventsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId) const;

      /**
       * Creates a new EventsResource_MoveMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier of the source calendar where
       * the event currently is on.
       * @param[in] eventId Event identifier.
       * @param[in] destination Calendar identifier of the target calendar where
       * the event is to be moved to.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_MoveMethod* NewMoveMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId,
          const StringPiece& destination) const;

      /**
       * Creates a new EventsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] eventId Event identifier.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId,
          const google_calendar_api::Event& _content_) const;

      /**
       * Creates a new EventsResource_QuickAddMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] text The text describing the event to be created.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_QuickAddMethod* NewQuickAddMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& text) const;

      /**
       * Creates a new EventsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] eventId Event identifier.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const StringPiece& eventId,
          const google_calendar_api::Event& _content_) const;

      /**
       * Creates a new EventsResource_WatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] calendarId Calendar identifier.
       * @param[in] _content_ The data object to watch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      EventsResource_WatchMethod* NewWatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& calendarId,
          const google_calendar_api::Channel& _content_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(EventsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class FreebusyResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      FreebusyResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~FreebusyResource();

      /**
       * Creates a new FreebusyResource_QueryMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _content_ The data object to query.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FreebusyResource_QueryMethod* NewQueryMethod(
          client::AuthorizationCredential* _credential_,
          const google_calendar_api::FreeBusyRequest& _content_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(FreebusyResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SettingsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      SettingsResource(CalendarService* service);

      /**
       * Standard destructor.
       */
      ~SettingsResource();

      /**
       * Creates a new SettingsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] setting Name of the user setting.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SettingsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& setting) const;

      /**
       * Creates a new SettingsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SettingsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      CalendarService* service_;
      DISALLOW_COPY_AND_ASSIGN(SettingsResource);
    };




  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit CalendarService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~CalendarService();

  /**
   * Gets the  resource method factory.
   *
   * @return AclResource for creating methods.
   */
  const AclResource& get_acl() const {
    return acl_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return CalendarListResource for creating methods.
   */
  const CalendarListResource& get_calendarList() const {
    return calendarList_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return CalendarsResource for creating methods.
   */
  const CalendarsResource& get_calendars() const {
    return calendars_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChannelsResource for creating methods.
   */
  const ChannelsResource& get_channels() const {
    return channels_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ColorsResource for creating methods.
   */
  const ColorsResource& get_colors() const {
    return colors_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return EventsResource for creating methods.
   */
  const EventsResource& get_events() const {
    return events_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return FreebusyResource for creating methods.
   */
  const FreebusyResource& get_freebusy() const {
    return freebusy_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SettingsResource for creating methods.
   */
  const SettingsResource& get_settings() const {
    return settings_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Calendar API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the CalendarService.
   */
  class SCOPES {
   public:
    /**
     * Manage your calendars.
     */
    static const StringPiece CALENDAR;

    /**
     * View your calendars.
     */
    static const StringPiece CALENDAR_READONLY;

   private:
    SCOPES();   // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  AclResource acl_;
  CalendarListResource calendarList_;
  CalendarsResource calendars_;
  ChannelsResource channels_;
  ColorsResource colors_;
  EventsResource events_;
  FreebusyResource freebusy_;
  SettingsResource settings_;

  DISALLOW_COPY_AND_ASSIGN(CalendarService);
};


/**
 * @defgroup DataObject Calendar API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Calendar API Service
 *
 * The service classes contain information about accessing and using the
 * Calendar API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Calendar API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * CalendarService to access the Calendar API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_calendar_api
#endif  // GOOGLE_CALENDAR_API_CALENDAR_SERVICE_H_
